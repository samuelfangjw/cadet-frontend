<MATTER>
  <NAME>
    Prefaces
  </NAME>

  <SECTION>
    <NAME>Preface to the JavaScript Adaptation</NAME>
  </SECTION>

<TEXT>
    The book <EM>Structure and Interpretation of Computer
    Programs</EM> (SICP) introduces the reader to central ideas of
    computation by establishing a series of mental models for computation.
    Chapters 1<ENDASH/>3 cover programming concepts that are common to all
    modern high-level programming languages. The original first two editions
    of SICP use the programming language Scheme in their program examples,
    whose minimalist, expression-oriented syntax allows the book to focus
    on the underlying ideas rather than the design of the chosen language.
    Chapters<SPACE/>4 and<SPACE/>5 use Scheme to formulate language
    processors for Scheme, deepening the readers<APOS/> understanding of the
    mental models and exploring language extensions and alternatives.
  </TEXT>

  <TEXT>
    Since its publication in 1984, SICP has been
    adopted as a textbook by universities and colleges around the world,
    including the National University of Singapore (NUS), which
    introduced the SICP-based introductory course CS1101S in 1997.
    In the mid-1990s, the languages Python, JavaScript,
    and Ruby emerged, which share central design elements with Scheme,
    but which employ a more complex, statement-oriented syntax that uses
    familiar algebraic (infix) notation. Their rise in popularity led
    instructors to adapt their SICP-based courses, typically by
    translating the example programs to their language of choice, by
    adding material specific to that language, and by omitting the
    material of chapters<SPACE/>4 and<SPACE/>5.
  </TEXT>

  <SUBHEADING><NAME>Adapting SICP to JavaScript</NAME></SUBHEADING>
  
  <TEXT>
    The work on this SICP adaptation to JavaScript (SICP JS) started at NUS
    in 2008, and CS1101S switched to JavaScript in 2012. The language
    standard ECMAScript 2015 introduced lambda expressions, tail recursion,
    and block-scoped variables and constants, which enabled the adaptation
    to become quite close to the original. We made substantial changes to
    the original SICP only when we felt they were forced by differences
    between JavaScript and Scheme. The book covers just a small
    fraction of JavaScript, so a reader would be ill-advised to use it
    to learn the language. For example, the notion of a JavaScript
    object<EMDASH/>considered one of its fundamental ingredients by any
    measure<EMDASH/>is not even mentioned!
  </TEXT>

  <TEXT>
    It was straightforward to translate the programs of chapters
    1<ENDASH/>3 to JavaScript by adding libraries that mirror Scheme
    primitives including support for list structure, and adapting the
    text accordingly. However, the switch to JavaScript forced us to make
    subtle changes in the interpreters and compiler of
    chapters<SPACE/>4 and<SPACE/>5 in order to handle return statements.
    Scheme's expression-oriented syntax doesn't have return statements,
    which are a prominent feature of statement-oriented languages.
  </TEXT>

  <TEXT>
    By using JavaScript, chapters<SPACE/>1<ENDASH/>3 introduce the reader
    to the syntactic style of most mainstream languages today.
    However, that same syntactic style
    gave rise to significant changes in chapter<SPACE/>4, because
    the direct representation of programs as data structures could
    no longer be taken for granted. This provided us with an
    opportunity to introduce the reader to the notion of program parsing
    in section<SPACE/>4.1,
    an important component of programming-language processors.
    In section 4.4, the rigid syntactic structure of JavaScript
    complicated the implementation of the presented logic programming system
    and exposed the limitations of JavaScript as a tool for programming
    language design.
  </TEXT>

<SUBHEADING><NAME>Resources for using SICP JS</NAME></SUBHEADING>

  <TEXT>
    The JavaScript subset used in SICP JS is designed to be just expressive
    enough for presenting the ideas of SICP with a conciseness and
    precision that matches the original. We took this aspiration further by
    designing a JavaScript sublanguage and function library for each SICP JS
    chapter, and developed a web-based programming environment called
    <EM>Source Academy</EM> that enforces the learners<APOS/> adherence to
    the chosen sublanguage. Unless explicitly stated, the programs in
    SICP JS adhere to the recommended strict mode of the ECMAScript 2020
    specification of JavaScript (<CITATION>ECMA 2020</CITATION>)
    and readily run in any standard-compliant
    JavaScript system and in all commonly available web browsers,
    provided the needed chapter library is loaded.
    The
    <LINK address="https://mitpress.mit.edu/sites/default/files/sicpjs/index.html">MIT
    Press web page for SICP JS</LINK>
    links to support for users of this book. This includes the Source Academy,
    an interactive online edition of SICP JS, all programs from the book,
    the documentation of the sublanguages, and extensive instructor resources, which include
    a large collection of additional exercises and
    recommendations on selecting a subset of SICP JS that can be covered in a
    typical college semester.
  </TEXT>

  <SUBHEADING><NAME>To the reader</NAME></SUBHEADING>

  <TEXT>
    We sincerely hope that if this book is your first
    encounter with programming you will use your newly gained understanding
    of the structure and interpretation of computer programs to learn more
    programming languages, including Scheme and the full JavaScript
    language. If you have learned JavaScript prior to picking up SICP
    JS, you might gain new insights into the fundamental concepts that underly
    the language and discover how much can be achieved with so little.
    If you come to SICP JS with a knowledge of the original SICP,
    you might enjoy seeing familiar ideas presented in a new
    format<EMDASH/>and might appreciate the online comparison edition,
    available at the book's web page, where SICP JS and SICP can be viewed
    side by side.
  </TEXT>

  <EPIGRAPH>
      <ATTRIBUTION>
        <AUTHOR>Martin Henz and Tobias Wrigstad</AUTHOR> 
      </ATTRIBUTION>
    </EPIGRAPH>

    <SECTION>
      <NAME>Preface to the Second Edition of SICP, 1996</NAME>
    </SECTION>
    
    <EPIGRAPH>
Is it possible that software is not like anything else, that it
is meant to be discarded: that the whole point is to 
always see it as a soap bubble?

      <ATTRIBUTION>
        <AUTHOR>Alan J. Perlis</AUTHOR> 
      </ATTRIBUTION>
    </EPIGRAPH>
<TEXT>    
The material in this book has been the basis of MIT's entry-level
computer science subject since 1980.  We had been teaching this
material for four years when the first edition was published, and
twelve more years have elapsed until the appearance of this second
edition.  We are pleased that our work has been widely adopted and
incorporated into other texts.  We have seen our students take the
ideas and programs in this book and build them in as the core of new
computer systems and languages.  In literal realization of an ancient
Talmudic pun, our students have become our builders.  We are lucky to
have such capable students and such accomplished builders.
</TEXT>
<TEXT>
In preparing this edition, we have incorporated hundreds of 
clarifications suggested by our own teaching experience and the
comments of colleagues at MIT and elsewhere.  We have redesigned
most of the major programming systems in the book, including
the generic-arithmetic system, the interpreters, the register-machine
simulator, and the compiler; and we have rewritten all the program
examples to ensure that any Scheme implementation conforming to
the IEEE Scheme standard (IEEE 1990) will be able to run the code.
</TEXT>
<TEXT>
This edition emphasizes several new themes.  The most important
of these is the central role played by different approaches to
dealing with time in computational models: objects with state,
concurrent programming, functional programming, lazy evaluation,
and nondeterministic programming.  We have included new sections on 
concurrency and nondeterminism, and we have tried to integrate this
theme throughout the book.
</TEXT>
<TEXT>
The first edition of the book closely followed the syllabus of our MIT
one-semester subject.  With all the new material in the second
edition, it will not be possible to cover everything in a single
semester, so the instructor will have to pick and choose.  In our own
teaching, we sometimes skip the section on logic programming
(section<SPACE/><REF NAME="sec:logic-programming"/>),
we have students use the
register-machine simulator but we do not cover its implementation 
(section<SPACE/><REF NAME="sec:simulator"/>),
and we give only a cursory overview of
the compiler
(section<SPACE/><REF NAME="sec:compilation"/>).
Even so, this is still
an intense course.  Some instructors may wish to cover only the first
three or four chapters, leaving the other material for subsequent
courses.
</TEXT>
<TEXT>
The World Wide Web site <LINK address="https://mitpress.mit.edu/sites/default/files/sicp/index.html">of MIT Press</LINK>
provides support for users of this book.
This includes programs from the book,
sample programming assignments, supplementary materials,
and downloadable implementations of the Scheme dialect of Lisp.
</TEXT>

    <EPIGRAPH>
      <ATTRIBUTION>
        <AUTHOR>Harold Abelson and Gerald Jay Sussman</AUTHOR> 
      </ATTRIBUTION>
    </EPIGRAPH>

  <SECTION>  
    <NAME>Preface to the First Edition of SICP, 1984</NAME>
  </SECTION>

    <EPIGRAPH>
A computer is like a violin.  You can imagine a novice trying first a
phonograph and then a violin.  The latter, he says, sounds terrible.
That is the argument we have heard from our humanists and most of our
computer scientists.  Computer programs are good, they say, for
particular purposes, but they aren't flexible.  Neither is a violin,
or a typewriter, until you learn how to use it.
      <ATTRIBUTION>
        <AUTHOR>Marvin Minsky</AUTHOR> 
        <TITLE><QUOTE>Why Programming Is a Good
Medium for Expressing Poorly-Understood and Sloppily-Formulated
Ideas</QUOTE></TITLE>
      </ATTRIBUTION>
    </EPIGRAPH>

    <TEXT>    
<QUOTE>The Structure and Interpretation of Computer Programs</QUOTE> is the
entry-level subject in computer science at the Massachusetts Institute
of Technology.  It is required of all students at MIT who major
in electrical engineering or in computer science, as one-fourth of the
<QUOTE>common core curriculum,</QUOTE> which also includes two subjects on
circuits and linear systems and a subject on the design of digital
systems.  We have been involved in the development of this subject
since 1978, and we have taught this material in its present form since
the fall of 1980 to between 600 and 700 students each year.  Most of
these students have had little or no prior formal training in
computation, although many have played with computers a bit and a few
have had extensive programming or hardware-design experience.
    </TEXT>
    <TEXT>
Our design of this introductory computer-science subject reflects two
major concerns.  First, we want to establish the idea that a computer
language is not just a way of getting a computer to perform operations
but rather that it is a novel formal medium for expressing ideas about
methodology.  Thus, programs must be written for people to read, and
only incidentally for machines to execute.  Second, we believe that
the essential material to be addressed by a subject at this level is
not the syntax of particular programming-language constructs, nor
clever algorithms for computing particular functions efficiently, nor
even the mathematical analysis of algorithms and the foundations of
computing, but rather the techniques used to control the intellectual
complexity of large software systems.
    </TEXT>
    <TEXT>
Our goal is that students who complete this subject should have a good
feel for the elements of style and the aesthetics of programming.
They should have command of the major techniques for controlling
complexity in a large system. They should be capable of reading a
50-page-long program, if it is written in an exemplary style. They
should know what not to read, and what they need not understand at any
moment.  They should feel secure about modifying a program, retaining
the spirit and style of the original author.
    </TEXT>
    <TEXT>
These skills are by no means unique to computer programming.  The
techniques we teach and draw upon are common to all of engineering
design.  We control complexity by building abstractions that hide
details when appropriate.  We control complexity by establishing
conventional interfaces that enable us to construct systems by
combining standard, well-understood pieces in a <QUOTE>mix and match</QUOTE> way.
We control complexity by establishing new languages for describing a
design, each of which emphasizes particular aspects of the design and
deemphasizes others.
    </TEXT>
    <TEXT>
Underlying our approach to this subject is our conviction that
<QUOTE>computer science</QUOTE> is not a science and that its significance has
little to do with computers.  The computer revolution is a revolution
in the way we think and in the way we express what we think.  The
essence of this change is the emergence of what might best be called
<EM>procedural epistemology</EM><EMDASH/>the study of the structure of
knowledge from an imperative point of view, as opposed to the more
declarative point of view taken by classical mathematical subjects.
Mathematics provides a framework for dealing precisely with notions of
<QUOTE>what is.</QUOTE>  Computation provides a framework for dealing precisely
with notions of <QUOTE>how to.</QUOTE>
    </TEXT>
    <TEXT>
In teaching our material we use a dialect of the programming language
Lisp.  We never formally teach the language, because we don't have to.
We just use it, and students pick it up in a few days.  This is one
great advantage of Lisp-like languages: They have very few ways of
forming compound expressions, and almost no syntactic structure.  All
of the formal properties can be covered in an hour, like the rules of
chess.  After a short time we forget about syntactic details of the
language (because there are none) and get on with the real
issues<EMDASH/>figuring out what we want to compute, how we will decompose
problems into manageable parts, and how we will work on the parts.
Another advantage of Lisp is that it supports (but does not enforce)
more of the large-scale strategies for modular decomposition of
programs than any other language we know.  We can make procedural and
data abstractions, we can use higher-order functions to capture common
patterns of usage, we can model local state using assignment and data
mutation, we can link parts of a program with streams and delayed
evaluation, and we can easily implement embedded languages.  All of
this is embedded in an interactive environment with excellent support
for incremental program design, construction, testing, and debugging.
We thank all the generations of Lisp wizards, starting with John
McCarthy, who have fashioned a fine tool of unprecedented power and
elegance.
    </TEXT>
    <TEXT>
Scheme, the dialect of Lisp that we use, is an attempt to bring
together the power and elegance of Lisp and Algol.  From Lisp we take
the metalinguistic power that derives from the simple syntax, the
uniform representation of programs as data objects, and the
garbage-collected heap-allocated data.  From Algol we take lexical
scoping and block structure, which are gifts from the pioneers of
programming-language design who were on the Algol committee.  We wish
to cite John Reynolds and Peter Landin for their insights into the
relationship of Church's lambda calculus to the structure of
programming languages.  We also recognize our debt to the
mathematicians who scouted out this territory decades before computers
appeared on the scene.  These pioneers include Alonzo Church, Barkley
Rosser, Stephen Kleene, and Haskell Curry.
</TEXT>

    <EPIGRAPH>
      <ATTRIBUTION>
        <AUTHOR>Harold Abelson and Gerald Jay Sussman</AUTHOR> 
      </ATTRIBUTION>
    </EPIGRAPH>
  </MATTER>
  

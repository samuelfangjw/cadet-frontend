[
  {
    "tag": "SUBSECTION",
    "body": "1.2.6  Example: Testing for Primality",
    "child": [
      {
        "tag": "TEXT",
        "id": "#p1",
        "child": [
          {
            "tag": "#text",
            "body": " This section describes two methods for checking the primality of an integer "
          },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": ", one with order of growth " },
          { "tag": "LATEXINLINE", "body": "\\Theta(\\sqrt{n})" },
          { "tag": "#text", "body": ", and a \"probabilistic\" algorithm with order of growth " },
          { "tag": "LATEXINLINE", "body": "\\Theta(\\log n)" },
          {
            "tag": "#text",
            "body": ". The exercises at the end of this section suggest programming projects based on these algorithms. "
          }
        ]
      },
      {
        "tag": "SUBHEADING",
        "body": "</h2></div>",
        "child": [{ "child": [{ "tag": "#text", "body": "Searching for divisors" }] }]
      },
      {
        "tag": "TEXT",
        "id": "#p2",
        "child": [
          {
            "tag": "#text",
            "body": " Since ancient times, mathematicians have been fascinated by problems concerning prime numbers, and many people have worked on the problem of determining ways to test if numbers are prime. One way to test if a number is prime is to find the number's divisors. The following program finds the smallest integral divisor (greater than 1) of a given number"
          },
          { "tag": "SPACE", "body": " " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": ". It does this in a straightforward way, by testing " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " for divisibility by successive integers starting with 2. " },
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 1,
            "program": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdRgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAx+VQ0tSlp6X39AuwcnEnCKUwtrFMdXUXFJaXpmNi5uTLNk4PZBAD5QEgL3FoB+RuaW8QAuUByqS1MKrOrU8JdOrtB2yuyg1Mmu3sSA-tSw0FnRx1AAalQo9UJSON1+wYZuVnCAI3z3Iu8b0ABSUFZQAF5v0AAGaPwDAMxhGaxCABZIsogA",
            "prepend": "FDBmFcDsGMBcEsD2kAEBnAjuAhgJwKYAUAHgJQoDewKNKBs4uqxKAVCsQNzAC+QA",
            "withoutPrepend": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AZwFsBDAGzYFMGKB9AEyoA3KgxoAnABQkAlKADeuUMtDjOFIuPoEqJfgOGiJ0gDSgMMgNy4AvoVKVa23fsEixUkmYrc+bo+Jyiiqq6pr0DACORCxqkj48Bu4ScgB8oCRKIdmgAPwZWTkqAFyg-vzc8b5JAWayhUV5oAl+hh4NRaU6ejUeps3V-h6gANSoVrb25NR0ZYYVDJIsZgBGQQ1qGlqgK6AApKAsoAC8p6AADNZ2uMzsXIlDxgAsFpZAA",
            "body": "function smallest_divisor(n) {\n    return find_divisor(n, 2);\n}\nfunction find_divisor(n, test_divisor) {\n    return square(test_divisor) > n\n           ? n\n           : divides(test_divisor, n)\n           ? test_divisor\n           : find_divisor(n, test_divisor + 1);\n}\nfunction divides(a, b) {\n    return b % a === 0;\n}\n"
          }
        ]
      },
      {
        "tag": "TEXT",
        "id": "#p3",
        "child": [
          { "tag": "#text", "body": " We can test whether a number is prime as follows: " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is prime if and only if " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is its own smallest divisor. " },
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 2,
            "program": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdRgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAx+VQ0tSlp6X39AuwcnEnCKUwtrFMdXUXFJaXpmNi5uTLNk4PZBAD5QEgL3FoB+RuaW8QAuUByqS1MKrOrU8JdOrtB2yuyg1Mmu3sSA-tSw0FnRx1AAalQo9UJSON1+wYZuVnCAI3z3Iu8b0ABSUFZQAF5v0AAGaM0Jx09Hs5gADuwqHoeC5hJ1HvR6N9PvojCYqmsQi4AbhQRCoTwACyRZRAA",
            "prepend": "FDBmFcDsGMBcEsD2kAEBnAjuAhgJwKYAUAHgJQoDewKNKBs4uqxKAVCsQNzAC+IEMBMnQBbbABtx+NLAD6AE3gA3eGkS5CkclVp18DJilDxI8hctXrNAGhQAmUtz4C4SVMdPmVajZFuxpOUVvdW1qWnpGVEwcAkIAmS9LXHIAPhRIcN1sgH4MrOzaAC4UYPh5aXjApJ9bLQLClDyEoIsfBsKSjzMynxsUFpr1FABqFABGR14wKFdhMoq0QmxbACMw3UjDVZQAUhRsFABeE5QABicgA",
            "withoutPrepend": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0KgZwH0AHAJyoFsBTAChIBKUAG9coCaHY8KRdvXoBeZaEZcAhgBtNPRhWYATKgDcmNdgMEBuXAF98TNp158ALBmtA",
            "body": "function is_prime(n) {\n    return n === smallest_divisor(n);\n}\n"
          }
        ]
      },
      {
        "tag": "TEXT",
        "id": "#p4",
        "child": [
          { "tag": "#text", "body": " The end test for " },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "find_divisor" }] }] },
          { "tag": "#text", "body": " is based on the fact that if " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is not prime it must have a divisor less than or equal to " },
          { "tag": "LATEXINLINE", "body": "\\sqrt{n}" },
          { "tag": "#text", "body": "." },
          {
            "tag": "FOOTNOTE_REF",
            "id": "footnote-link-1",
            "body": "1",
            "href": "/interactive-sicp/1.2.6#footnote-1"
          },
          {
            "tag": "#text",
            "body": " This means that the algorithm need only test divisors between 1 and "
          },
          { "tag": "LATEXINLINE", "body": "\\sqrt{n}" },
          { "tag": "#text", "body": ". Consequently, the number of steps required to identify " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " as prime will have order of growth " },
          { "tag": "LATEXINLINE", "body": "\\Theta(\\sqrt{n})" },
          { "tag": "#text", "body": ". " }
        ]
      },
      {
        "tag": "SUBHEADING",
        "body": "</h2></div>",
        "child": [{ "child": [{ "tag": "#text", "body": "The Fermat test" }] }]
      },
      {
        "tag": "TEXT",
        "id": "#p5",
        "child": [
          { "tag": "#text", "body": " The " },
          { "tag": "LATEXINLINE", "body": "\\Theta(\\log n)" },
          {
            "tag": "#text",
            "body": " primality test is based on a result from number theory known as "
          },
          { "tag": "#text", "body": " Fermat's Little Theorem." },
          {
            "tag": "FOOTNOTE_REF",
            "id": "footnote-link-2",
            "body": "2",
            "href": "/interactive-sicp/1.2.6#footnote-2"
          },
          {
            "tag": "BLOCKQUOTE",
            "body": "<blockquote class='blockquote'>\n      <B>Fermat's Little Theorem:</B> \n      \n      If $n$ is a prime number and \n      $a$ is any positive integer less than \n      $n$, then $a$ raised\n      to the $n$th power is congruent to\n      $a$ modulo $n$.\n    </blockquote>\n"
          },
          { "tag": "#text", "body": " (Two numbers are said to be " },
          { "child": [{ "tag": "#text", "body": "congruent modulo" }] },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " if they both have the same remainder when divided by " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": ". The remainder of a number " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": " when divided by " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is also referred to as the " },
          { "child": [{ "tag": "#text", "body": "remainder of" }] },
          { "tag": "LATEXINLINE", "body": "a" },
          { "child": [{ "tag": "#text", "body": "modulo" }] },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": ", or simply as " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "child": [{ "tag": "#text", "body": "modulo" }] },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": ".) " }
        ]
      },
      {
        "tag": "TEXT",
        "id": "#p6",
        "child": [
          { "tag": "#text", "body": " If " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is not prime, then, in general, most of the numbers " },
          { "tag": "LATEXINLINE", "body": "a < n" },
          {
            "tag": "#text",
            "body": " will not satisfy the above relation. This leads to the following algorithm for testing primality: Given a number "
          },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": ", pick a " },
          { "tag": "#text", "body": " random number " },
          { "tag": "LATEXINLINE", "body": "a < n" },
          { "tag": "#text", "body": " and compute the remainder of " },
          { "tag": "LATEXINLINE", "body": "a^n" },
          { "tag": "#text", "body": " modulo " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": ". If the result is not equal to " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": ", then " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is certainly not prime. If it is " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": ", then chances are good that " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is prime. Now pick another random number " },
          { "tag": "LATEXINLINE", "body": "a" },
          {
            "tag": "#text",
            "body": " and test it with the same method. If it also satisfies the equation, then we can be even more confident that "
          },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is prime. By trying more and more values of " },
          { "tag": "LATEXINLINE", "body": "a" },
          {
            "tag": "#text",
            "body": ", we can increase our confidence in the result. This algorithm is known as the Fermat test. "
          }
        ]
      },
      {
        "tag": "TEXT",
        "id": "#p7",
        "child": [
          { "tag": "#text", "body": " To implement the Fermat test, we need a " },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          { "tag": "#text", "body": " that computes the " },
          { "tag": "#text", "body": " exponential of a number modulo another number: " },
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 3,
            "program": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0KgZwH0BTAN1ZIAoSBKUAG9coUaABOrCkXH16AUlAZQAXjWgADAG5cAX3zFy1OqEYBHIgENJ3AB4DhYiVJn1boAFShbO-YVKUtPSstgAOALY0ACbcAEaWjKwANKAhoSnhDiJiktKyqWGq6hrZTmUA-KilZWIAXAwsHFzcaXzVNaCV5lY2aZEx8YkpaaBgGBl8Aorh7TX1cQmsngUR0QtDK6AAtKgTU6Dhvvh9awAsKQDMKQCsfFpAA",
            "prepend": "FDBmFcDsGMBcEsD2kAE8DOB9ApgN25ABSQCUKA3sCtSgE7azi2qoCkKATCgLy8oAMAbmABfEBBgJkKdAEdwAQ3qEAHmUo06DJqhUoAVChXCRQA",
            "withoutPrepend": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AUwA8AHAWxoBMAKAIwEMAzgwA0jVmLYBKUAG9coRaABODCkWX1mLUAF59oAAwKlppQH5UJs6YBcoKoID6DAG4MS3bVOs3FlwQBHIn5VL1YOHgFhMW1QMAxJKRkAUlA2Xz97PiEGUAAqcXYuHJii0ABaVCTU9IBuXABffG1I7gAWMQBmMQBWKTqgA",
            "body": "function expmod(base, exp, m) {\n    return exp === 0\n           ? 1\n           : is_even(exp)\n           ? square(expmod(base, exp / 2, m)) % m\n           : (base * expmod(base, exp - 1, m)) % m;\n}\n"
          }
        ]
      },
      {
        "tag": "TEXT",
        "id": "#p8",
        "child": [
          { "tag": "#text", "body": " This is very similar to the " },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "fast_expt" }] }] },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          { "tag": "#text", "body": " of section" },
          { "tag": "SPACE", "body": " " },
          {
            "tag": "REF",
            "id": "1.2.6-ex-link-1.2.4",
            "body": "1.2.4",
            "href": "/interactive-sicp/1.2.4"
          },
          {
            "tag": "#text",
            "body": ". It uses successive squaring, so that the number of steps grows logarithmically with the exponent."
          },
          {
            "tag": "FOOTNOTE_REF",
            "id": "footnote-link-3",
            "body": "3",
            "href": "/interactive-sicp/1.2.6#footnote-3"
          }
        ]
      },
      {
        "tag": "TEXT",
        "id": "#p9",
        "child": [
          {
            "tag": "#text",
            "body": " The Fermat test is performed by choosing at random a number "
          },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": " between 1 and " },
          { "tag": "LATEXINLINE", "body": "n-1" },
          { "tag": "#text", "body": " inclusive and checking whether the remainder modulo " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " of the " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": "th power of " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": " is equal to " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": ". The random number " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": " is chosen using the " },
          {
            "child": [
              {
                "child": [
                  { "tag": "#text", "body": " \tprimitive function \t" },
                  { "tag": "JAVASCRIPTINLINE", "body": "math_random" },
                  { "tag": "#text", "body": ", " }
                ]
              }
            ]
          },
          { "child": [] },
          {
            "child": [
              {
                "child": [
                  {
                    "tag": "#text",
                    "body": " \twhich returns a nonnegative number less than 1. Hence, to obtain \ta random number between 1 and "
                  },
                  { "tag": "LATEXINLINE", "body": "n-1" },
                  { "tag": "#text", "body": ", we multiply \tthe return value of " },
                  { "tag": "JAVASCRIPTINLINE", "body": "math_random" },
                  { "tag": "#text", "body": " by \t" },
                  { "tag": "LATEXINLINE", "body": "n-1" },
                  {
                    "tag": "#text",
                    "body": ", round down the result with the \tprimitive function \t"
                  },
                  { "tag": "JAVASCRIPTINLINE", "body": "math_floor" },
                  { "tag": "#text", "body": ", \tand add 1: " }
                ]
              }
            ]
          },
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 4,
            "program": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUFQYB9TgDdOJbiUEjxEzlJmh6AUlAZQAXk+gADKo2FSSlp6Tl4ABwBbGgATbgAjVgZOABpQULDUiKtRcUlpEPCPL28cmzKAflRSsvEALj1DEzNudP5qmtBK5jYuFvCo2ISk1PTQMAxM-kEXCPaa+vjEzgU0-pjF4dWw0ABaVEnp0Ai-TUCdenZWEmiaCItsmzyHCNYKAAsDAgAbGhp2bhe7wMl2ut24gkUlhOAW0wVABE47EBBgonAYFHuwmqWiCugo7AAngYqBjWA8Ok8CpF1qxUiQ6YJPO5QKxVDYNI87PlQPiiSTuChQABqI6vD7fX7-QEfEE3O4Q0AWXaoKb8aEIpGvFFojEATgA7GqgA",
            "prepend": "FDBmFcDsGMBcEsD2kAEBnAjuAhgJwKYAUAHgJQoDewKNKBs4uqxKAVCsQNzAC+IEMBMhTw0AfXwA3fJEKRyVWnXwMmKVAFIUAJhQBeAygAM3PmChwkqfMQAOAW0QATQgCNsafABoUN2z-sFalp6Rms7fUMjYKVYgH4UAEYY2NoALhFxKRlCP1IU1JQEzBwCXLtHF3dPHz8UAHodANJyLXsC1Iy3D3w2Xwrnbpr+2xQAWiTm1pR7U34LIVRcbEgnRHs5IKVQtXtsWAALMVAAG0REXEI9w7Fl1fXCcnZ5UyA",
            "withoutPrepend": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AgUwCcBbAQwoH0LGBnCgAoSASlABvXKGkNSlWvQrMAnlypD2YyTJ2hmjCkWb1GADwAOrGgBNB7ADSgSj0aAC8H0OwDcUmQF8-aX1DY1AlVXVBFFAAalAOCgALLgIAGxoaZkFElOZ2EmsaVkExACpQYVAAWlQRet9AwhZEnn4hAE4AdhFvIA",
            "body": "function fermat_test(n) {\n    function try_it(a) {\n        return expmod(a, n, n) === a;\n    }\n    return try_it(1 + math_floor(math_random() * (n - 1)));\n}\n"
          }
        ]
      },
      {
        "tag": "TEXT",
        "id": "#p10",
        "child": [
          { "tag": "#text", "body": " The following " },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          {
            "tag": "#text",
            "body": " runs the test a given number of times, as specified by a parameter. Its value is true if the test succeeds every time, and false otherwise. "
          },
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 5,
            "program": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUFQYB9TgDdOJbiUEjxEzlJmh6AUlAZQAXk+gADKo2FSSlp6Tl4ABwBbGgATbgAjVgZOABpQULDUiKtRcUlpEPCPL28cmzKAflRSsvEALj1DEzNudP5qmtBK5jYuFvCo2ISk1PTQMAxM-kEXCPaa+vjEzgU0-pjF4dWw0ABaVEnp0Ai-TUCdenZWEmiaCItsmzyHCNYKAAsDAgAbGhp2bhe7wMl2ut24gkUlhOAW0wVABE47EBBgonAYFHuwmqWiCugo7AAngYqBjWA8Ok8CpF1qxUiQ6YJPO5QKxVDYNI87PlQPiiSTuChQABqI6vD7fX7-QEfEE3O4Q0AWXaoKb8aE487wxIUYmGMLsKgRHj0nmGtHksSU01GhhFZklDo2Sr4oicOZleoIpGvFFojGWd1OrXo3UGfVmiypag25UoNqOupar5JdXa0Pho3cACcAHZUgBmNVAA",
            "prepend": "FDBmFcDsGMBcEsD2kAEBnAjuAhgJwKYAUAHgJQoDewKNKBs4uqxKAVCsQNzAC+IEMBMhTw0AfXwA3fJEKRyVWnXwMmKVAFIUAJhQBeAygAM3PmChwkqfMQAOAW0QATQgCNsafABoUN2z-sFalp6Rms7fUMjYKVYgH4UAEYY2NoALhFxKRlCP1IU1JQEzBwCXLtHF3dPHz8UAHodANJyLXsC1Iy3D3w2Xwrnbpr+2xQAWiTm1pR7U34LIVRcbEgnRHs5IKVQtXtsWAALMVAAG0REXEI9w7Fl1fXCcnZ5OfNBKxRQfFxrsVh8NCwTaUFICSzCWC4ACeYngQOwW0KO3CDkG2B8kAx5AMehQ2G4Sj42xUYRQkJhcMIiRQAGoZvsjqdzpdrkc7msNk8UHJxkkWqRTEA",
            "withoutPrepend": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AgQwGcKB9K5tgBwCcqAtgFMAFCQA0oasOYBKUAG9coFaF5CKRXvWlDmoALxHQABmWqLqgPxTeRIecsWAXAyG8BjdhT0UxsxycVGyZWDi4+QVEJKSj9AFpUAKCXBkYAG2YhAG5cAF98UPZOHn5hEQBOAHZJAGZZbKA",
            "body": "function fast_is_prime(n, times) {\n    return times === 0\n           ? true\n           : fermat_test(n)\n           ? fast_is_prime(n, times - 1)\n           : false;\n}\n"
          }
        ]
      },
      {
        "tag": "SUBHEADING",
        "body": "</h2></div>",
        "child": [{ "child": [{ "tag": "#text", "body": "Probabilistic methods" }] }]
      },
      {
        "tag": "TEXT",
        "id": "#p11",
        "child": [
          {
            "tag": "#text",
            "body": " The Fermat test differs in character from most familiar algorithms, in which one computes an answer that is guaranteed to be correct. Here, the answer obtained is only probably correct. More precisely, if "
          },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " ever fails the Fermat test, we can be certain that " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is not prime. But the fact that " },
          { "tag": "LATEXINLINE", "body": "n" },
          {
            "tag": "#text",
            "body": " passes the test, while an extremely strong indication, is still not a guarantee that "
          },
          { "tag": "LATEXINLINE", "body": "n" },
          {
            "tag": "#text",
            "body": " is prime. What we would like to say is that for any number "
          },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": ", if we perform the test enough times and find that " },
          { "tag": "LATEXINLINE", "body": "n" },
          {
            "tag": "#text",
            "body": " always passes the test, then the probability of error in our primality test can be made as small as we like. "
          }
        ]
      },
      {
        "tag": "TEXT",
        "id": "#p12",
        "child": [
          {
            "tag": "#text",
            "body": " Unfortunately, this assertion is not quite correct. There do exist numbers that fool the Fermat test: numbers "
          },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " that are not prime and yet have the property that " },
          { "tag": "LATEXINLINE", "body": "a^n" },
          { "tag": "#text", "body": " is congruent to " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": " modulo " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " for all integers " },
          { "tag": "LATEXINLINE", "body": "a < n" },
          {
            "tag": "#text",
            "body": ". Such numbers are extremely rare, so the Fermat test is quite reliable in practice."
          },
          {
            "tag": "FOOTNOTE_REF",
            "id": "footnote-link-4",
            "body": "4",
            "href": "/interactive-sicp/1.2.6#footnote-4"
          }
        ]
      },
      {
        "tag": "TEXT",
        "id": "#p13",
        "child": [
          {
            "tag": "#text",
            "body": " There are variations of the Fermat test that cannot be fooled. In these tests, as with the Fermat method, one tests the primality of an integer "
          },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " by choosing a random integer " },
          { "tag": "LATEXINLINE", "body": "a < n" },
          { "tag": "#text", "body": " and checking some condition that depends upon " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " and " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": ". (See exercise" },
          { "tag": "SPACE", "body": " " },
          {
            "tag": "REF",
            "id": "1.2.6-ex-link-1.28",
            "body": "1.28",
            "href": "/interactive-sicp/1.2.6#ex_1.28"
          },
          {
            "tag": "#text",
            "body": " for an example of such a test.) On the other hand, in contrast to the Fermat test, one can prove that, for any "
          },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": ", the condition does not hold for most of the integers " },
          { "tag": "LATEXINLINE", "body": "a < n" },
          { "tag": "#text", "body": " unless " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is prime. Thus, if " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " passes the test for some random choice of" },
          { "tag": "SPACE", "body": " " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": ", the chances are better than even that " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is prime. If " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " passes the test for two random choices of " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": ", the chances are better than 3 out of 4 that " },
          { "tag": "LATEXINLINE", "body": "n" },
          {
            "tag": "#text",
            "body": " is prime. By running the test with more and more randomly chosen values of "
          },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": " we can make the probability of error as small as we like. " }
        ]
      },
      {
        "tag": "TEXT",
        "id": "#p14",
        "child": [
          {
            "tag": "#text",
            "body": " The existence of tests for which one can prove that the chance of error becomes arbitrarily small has sparked interest in algorithms of this type, which have come to be known as "
          },
          { "child": [{ "tag": "#text", "body": "probabilistic algorithms" }] },
          { "tag": "#text", "body": ". There is " },
          {
            "tag": "#text",
            "body": " a great deal of research activity in this area, and probabilistic algorithms have been fruitfully applied to many fields."
          },
          {
            "tag": "FOOTNOTE_REF",
            "id": "footnote-link-5",
            "body": "5",
            "href": "/interactive-sicp/1.2.6#footnote-5"
          }
        ]
      },
      {
        "tag": "EXERCISE",
        "title": "Exercise 1.21",
        "id": "#ex_1.21",
        "child": [
          { "tag": "#text", "body": " Use the " },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "smallest_divisor" }] }] },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          {
            "tag": "#text",
            "body": " to find the smallest divisor of each of the following numbers: 199, 1999, 19999. "
          }
        ],
        "solution": [
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 6,
            "program": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdRgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAx+VQ0tSlp6X39AuwcnEnCKUwtrFMdXUXFJaXpmNi5uTLNk4PZBAD5QEgL3FoB+RuaW8QAuUByqS1MKrOrU8JdOrtB2yuyg1Mmu3sSA-tSw0FnRx1AAalQo9UJSON1+wYZuVnCAI3z3Iu8b0ABSUFZQAF5v0AAGaPwDAMxhGaxCKAAnBDDiB9EYTFUwU5IVCYWAgfDQfNwVDUcogA",
            "prepend": "FDBmFcDsGMBcEsD2kAEBnAjuAhgJwKYAUAHgJQoDewKNKBs4uqxKAVCsQNzAC+IEMBMnQBbbABtx+NLAD6AE3gA3eGkS5CkclVp18DJilDxI8hctXrNAGhQAmUtz4C4SVMdPmVajZFuxpOUVvdW1qWnpGVEwcAkIAmS9LXHIAPhRIcN1sgH4MrOzaAC4UYPh5aXjApJ9bLQLClDyEoIsfBsKSjzMynxsUFpr1FABqFABGR14wKFdhMoq0QmxbACMw3UjDVZQAUhRsFABeE5QABicgA",
            "withoutPrepend": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuBnAWwEMAbMgUwIBcB9AEwEsA3JggewCcAKFATn4BKANy4QoYuSq1Grdtz6DhYiVIrV6zNp14DlooA",
            "body": "smallest_divisor(199);\n// smallest_divisor(1999);\n// smallest_divisor(19999);\n"
          }
        ]
      },
      {
        "tag": "EXERCISE",
        "title": "Exercise 1.22",
        "id": "#ex_1.22",
        "child": [
          {
            "child": [
              {
                "child": [
                  { "tag": "#text", "body": " Assume a primitive function \t" },
                  { "tag": "JAVASCRIPTINLINE", "body": "get_time" },
                  {
                    "tag": "#text",
                    "body": " of no arguments \tthat returns the number of milliseconds that have passed since 00:00:00 UTC \ton Thursday, 1 January, 1970."
                  },
                  {
                    "tag": "FOOTNOTE_REF",
                    "id": "footnote-link-6",
                    "body": "6",
                    "href": "/interactive-sicp/1.2.6#footnote-6"
                  },
                  { "tag": "#text", "body": " \tThe following " },
                  { "tag": "JAVASCRIPTINLINE", "body": "timed_prime_test" },
                  { "tag": "#text", "body": " \tfunction, " }
                ]
              }
            ]
          },
          { "tag": "#text", "body": " when called with an integer " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": ", prints " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " and checks to see if " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is prime. If " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is prime, the " },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          { "tag": "#text", "body": " prints three asterisks" },
          {
            "child": [
              {
                "child": [
                  {
                    "tag": "FOOTNOTE_REF",
                    "id": "footnote-link-7",
                    "body": "7",
                    "href": "/interactive-sicp/1.2.6#footnote-7"
                  }
                ]
              }
            ]
          },
          {
            "tag": "#text",
            "body": " followed by the amount of time used in performing the test. "
          },
          { "child": [] },
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 7,
            "program": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdRgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAx+VQ0tSlp6X39AuwcnEnCKUwtrFMdXUXFJaXpmNi5uTLNk4PZBAD5QEgL3FoB+RuaW8QAuUByqS1MKrOrU8JdOrtB2yuyg1Mmu3sSA-tSw0FnRx1AAalQo9UJSON1+wYZuVnCAI3z3Iu8b0ABSUFZQAF5v0AAGaM0Jx09Hs5gADuwqHoeC5hJ1HvR6N9PvojCYqmsQi4AcdtPFNlDOAEIYTzLNnPdxNYGGDDKwAJ4U1QPTzFRgUDgWEnQslZDYAc08ZMJ3H4hxiQPxZk54MhPPJ6XZMuo0MpYgRoFB3Jh-EWbQ8YMcXLlPEFFhVPEEAFolexzYTdVN3L0KOwiJwAbFgQajbKRZw6WCGEThaq4e5qbSGdwAEQKeSKGOHFleeiRumMgOsIMhi3i-AW4km3lmbgAFgAzFEgA",
            "prepend": "FDBmFcDsGMBcEsD2kAEBnAjuAhgJwKYAUAHgJQoDewKNKBs4uqxKAVCsQNzAC+IEMBMnQBbbABtx+NLAD6AE3gA3eGkS5CkclVp18DJilDxI8hctXrNAGhQAmUtz4C4SVMdPmVajZFuxpOUVvdW1qWnpGVEwcAkIAmS9LXHIAPhRIcN1sgH4MrOzaAC4UYPh5aXjApJ9bLQLClDyEoIsfBsKSjzMynxsUFpr1FABqFABGR14wKFdhMoq0QmxbACMw3UjDVZQAUhRsFABeE5QABid+WaFUVVkAB1x4ESItSgKt1FQTo9EJKUSvSsWicQA",
            "withoutPrepend": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0agWwFMATAfQAcAnKl9iswDOFABQkAlKADeuUPNCsqQzgBsAhgE9xEgNxyF3ZhSLd6I9dwpde-QSPEAaUAHNjAvs1ES9uAL6EpJS05hSW1jyeAsJiJM4WVh4sUrIKoEYmZqDKNp46BmmFAPzpzJw0iZEsom7WTF5SALSgCXWeEgWFCgBcDNxEzPoBxOTUdKXllbZezBqcQmxJzCmdSioa2gBEoABUe6CbvmkZpvRralqis+rzi-W+Abj1HFXM0Q4ALADMekA",
            "body": "function timed_prime_test(n) {\n    display(n);\n    return start_prime_test(n, get_time());\n}\nfunction start_prime_test(n, start_time) {\n    return is_prime(n)\n           ? report_prime(get_time() - start_time)\n           : true;\n}\nfunction report_prime(elapsed_time) {\n    display(\" *** \");\n    return display(elapsed_time);\n}\n"
          },
          { "tag": "#text", "body": " Using this " },
          { "child": [{ "child": [{ "tag": "#text", "body": "function," }] }] },
          { "tag": "#text", "body": " write a " },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "search_for_primes" }] }] },
          {
            "tag": "#text",
            "body": " that checks the primality of consecutive odd integers in a specified range. Use your "
          },
          { "child": [{ "child": [{ "tag": "#text", "body": " function " }] }] },
          {
            "tag": "#text",
            "body": " to find the three smallest primes larger than 1000; larger than 10,000; larger than 100,000; larger than 1,000,000. Note the time needed to test each prime. Since the testing algorithm has order of growth of "
          },
          { "tag": "LATEXINLINE", "body": "\\Theta(\\sqrt{n})" },
          {
            "tag": "#text",
            "body": ", you should expect that testing for primes around 10,000 should take about "
          },
          { "tag": "LATEXINLINE", "body": "\\sqrt{10}" },
          {
            "tag": "#text",
            "body": " times as long as testing for primes around 1000. Do your timing data bear this out? How well do the data for 100,000 and 1,000,000 support the "
          },
          { "tag": "LATEXINLINE", "body": "\\sqrt{n}" },
          {
            "tag": "#text",
            "body": " prediction? Is your result compatible with the notion that programs on your machine run in time proportional to the number of steps required for the computation? "
          }
        ],
        "solution": [
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 8,
            "program": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdRgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAx+VQ0tSlp6X39AuwcnEnCKUwtrFMdXUXFJaXpmNi5uTLNk4PZBAD5QEgL3FoB+RuaW8QAuUByqS1MKrOrU8JdOrtB2yuyg1Mmu3sSA-tSw0FnRx1AAalQo9UJSON1+wYZuVnCAI3z3Iu8b0ABSUFZQAF5v0AAGaM0Jx09Hs5gADuwqHoeC5hJ1HvR6N9PvojCYqmsQi4AcdtPFNlDOAEIYTzLNnPdxNYGGDDKwAJ4U1QPTzFRgUDgWEnQslZDYAc08ZMJ3H4hxiQPxZk54MhPPJ6XZMuo0MpYgRoFB3Jh-EWbQ8YMcXLlPEFFhVPEEAFolexzYTdVN3L0KOwiJwAbFgQajbKRZw6WCGEThaq4e5qbSGdwAEQKeSKGOHFleeiRumMgOsIMhi3iwF43TBjhkAAW5gIjj90Mu0rtGUJDDVHlTBJrXx+vz17hmbs43Z6toooAaGFAADJx0PXhEOyiu07xO1i+wyxWq9raxy7XtUA2a47F6AQJqCKAAO6cUBm0CkQaJImgK0NKgUBjvUDagdiXqgu+cB9LAqQliRNXkzG4OsKDFUBv2mRhOBLctK3Yashig3cMH3UwnwOODehXNcULQrdOUw7CmxxQjkI3E1LhQX5GN+cIAGZDhPaj11QzduAYpjmNANjVA4xDVxo7i6N4-jGNYqIgA",
            "prepend": "FDBmFcDsGMBcEsD2kAEBnAjuAhgJwKYAUAHgJQoDewKNKBs4uqxKAVCsQNzAC+IEMBMnQBbbABtx+NLAD6AE3gA3eGkS5CkclVp18DJilDxI8hctXrNAGhQAmUtz4C4SVMdPmVajZFuxpOUVvdW1qWnpGVEwcAkIAmS9LXHIAPhRIcN1sgH4MrOzaAC4UYPh5aXjApJ9bLQLClDyEoIsfBsKSjzMynxsUFpr1FABqFABGR14wKFdhMoq0QmxbACMw3UjDVZQAUhRsFABeE5QABid+WaFUVVkAB1x4ESItSgKt1FQTo9EJKUSvSsWkuM0EbgGz3wZkeUNkLU0G1oijQ93E2AAnojuJt9FF0LA8HJYS94YF+gBzfTwqGEUhTZzXCEyIkPJ6khF+AmshAvJE0T4oO4k16kDq5PT3dTE9lEKlyXlEcgAWm5uAVULFjV0JVguHA+EuLhukulbNp+HR9zQ0JpfPeuhRaMxhAARGxWOxXVNcQZUE70VjLdhrbbFQygA",
            "withoutPrepend": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AZwFMBDAJzIAsB9Amt7gAc2VALZMGACgYV2FADShq4hgEpQAb1ygdoNkwpE29ZRNABeS6AAM23fd0B+JWyJM7D+wC5GsthVAAPlAMUAAyMN85UABSEIsrW08HZ2Z2Ll5+IREVaT8AgGpURVM1D2TQEFAqAlAAdyZQAHMDUFIAEyYCKhImdtAAWmCqCgZQFlBhMXcK3R8qBm4Orp6+yVN27OnuCgkKPLlVdXLk1NYOHj4BKdyZaKKMEumxgdRVE88fNIvM65yJA7+UAPJ4qVQAblwAF98N8MlctrkUNYUdZFABmCG4Kpwy5ZG4A5GotGgTGQnHneH4-5SInEjEQoA",
            "body": "function search_for_primes(start, times) {\n    return times === 0\n           ? true\n           : start > 2 && start % 2 === 0\n           ? search_for_primes(start + 1, times)\n           // if we get undefined -> its a prime\n           : is_undefined(timed_prime_test(start)) \n           ? search_for_primes(start + 2, times - 1)\n           : search_for_primes(start + 2, times);\n}\n"
          },
          { "tag": "#text", "body": " The timing data quite clearly supports the " },
          { "tag": "LATEXINLINE", "body": "\\sqrt{n}" },
          {
            "tag": "#text",
            "body": " for prediction that is sufficiently big, such as 100,000 and 1,000,000. "
          }
        ]
      },
      {
        "tag": "EXERCISE",
        "title": "Exercise 1.23",
        "id": "#ex_1.23",
        "child": [
          { "tag": "#text", "body": " The " },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "smallest_divisor" }] }] },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          {
            "tag": "#text",
            "body": " shown at the start of this section does lots of needless testing: After it checks to see if the number is divisible by 2 there is no point in checking to see if it is divisible by any larger even numbers. This suggests that the values used for "
          },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "test_divisor" }] }] },
          {
            "tag": "#text",
            "body": " should not be 2, 3, 4, 5, 6, … but rather 2, 3, 5, 7, 9, …. To implement this change, "
          },
          { "child": [{ "child": [{ "tag": "#text", "body": "declare a function" }] }] },
          {
            "tag": "#text",
            "body": " that returns 3 if its input is equal to 2 and otherwise returns its input plus"
          },
          { "tag": "SPACE", "body": " " },
          { "tag": "#text", "body": "2. Modify the " },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "smallest_divisor" }] }] },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          { "tag": "#text", "body": " to use " },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "next(test_divisor)" }] }] },
          { "tag": "#text", "body": " instead of " },
          {
            "child": [
              {
                "child": [
                  { "tag": "JAVASCRIPTINLINE", "body": "test_divisor + 1" },
                  { "tag": "#text", "body": ". " }
                ]
              }
            ]
          },
          { "tag": "#text", "body": " With " },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "timed_prime_test" }] }] },
          { "tag": "#text", "body": " incorporating this modified version of " },
          {
            "child": [
              {
                "child": [
                  { "tag": "JAVASCRIPTINLINE", "body": "smallest_divisor" },
                  { "tag": "#text", "body": ", " }
                ]
              }
            ]
          },
          { "tag": "#text", "body": " run the test for each of the 12 primes found in exercise" },
          { "tag": "SPACE", "body": " " },
          {
            "tag": "REF",
            "id": "1.2.6-ex-link-1.22",
            "body": "1.22",
            "href": "/interactive-sicp/1.2.6#ex_1.22"
          },
          {
            "tag": "#text",
            "body": ". Since this modification halves the number of test steps, you should expect it to run about twice as fast. Is this expectation confirmed? If not, what is the observed ratio of the speeds of the two algorithms, and how do you explain the fact that it is different from 2? "
          }
        ],
        "solution": [
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 9,
            "withoutPrepend": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvoVKVa9BgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAx+VQ1icmo6UGs7S1NuVnCAI1dRcUlpegzQAFJQVlAAXkrQAAZozTidUHtzAAd2Kj0eF2EcsTzvekryxgNjUwsk4KcXOtjtBOpOgLaOznMKceds92sGFsNWAE8t1Xd+3QoOCxXO9c2ScIBzT3XV7n4o9Xr5i6vW9tuGzMYUYl3YFkWnG2uU8+SaDH+bxcvXc7gA-B4Wo5rgCeM8IW9BABaUF-SH8FGosQALlAFHYRE4sy08XoXCx4MRnW4nAOLQYnAC5J6O3s+yO3AARAp5IpJZ9RXsDsdeax+YLXp1PjEWY0SJxeBRuH4WkQKNC+rDvCazRUqhhQJSqRiAMyOqmo2k2iigADUEWZDQSvn8gTsDmm4SBEyCEYtHi8uhYHB40bDU0EAD5QCQnaiMbmPe5aZMUgxuGnJhHwsii+IMZXY4488WfH4AlWQg8cwajY3w44PnVcJDlri7sCACwuqJAA",
            "body": "function next(input) {\n    return input === 2 \n           ? 3 \n           : input + 2;\n}\n\nfunction find_divisor(n, test_divisor) {\n    return square(test_divisor) > n\n           ? n\n           : divides(test_divisor, n)\n           ? test_divisor\n           : find_divisor(n, next(test_divisor));\n}\n"
          },
          {
            "tag": "#text",
            "body": " The ratio of the speeds of the two algorithms is not exactly 2, but this might be due to hardware / network issues. It is about 1.5 times faster compared to previous solution. "
          }
        ]
      },
      {
        "tag": "EXERCISE",
        "title": "Exercise 1.24",
        "id": "#ex_1.24",
        "child": [
          { "tag": "#text", "body": " Modify the " },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "timed_prime_test" }] }] },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          { "tag": "#text", "body": " of exercise" },
          { "tag": "SPACE", "body": " " },
          {
            "tag": "REF",
            "id": "1.2.6-ex-link-1.22",
            "body": "1.22",
            "href": "/interactive-sicp/1.2.6#ex_1.22"
          },
          { "tag": "#text", "body": " to use " },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "fast_is_prime" }] }] },
          {
            "tag": "#text",
            "body": " (the Fermat method), and test each of the 12 primes you found in that exercise. Since the Fermat test has "
          },
          { "tag": "LATEXINLINE", "body": "\\Theta(\\log n)" },
          {
            "tag": "#text",
            "body": " growth, how would you expect the time to test primes near 1,000,000 to compare with the time needed to test primes near 1000? Do your data bear this out? Can you explain any discrepancy you find? "
          }
        ],
        "solution": [
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 10,
            "program": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUFQYB9TgDdOJbiUEjxEzlJmh6AUlAZQAXk+gADKo2FSSlp6Tl4ABwBbGgATbgAjVgZOABpQULDUiKtRcUlpEPCPL28cmzKAflRSsvEALj1DEzNudP5qmtBK5jYuFvCo2ISk1PTQMAxM-kEXCPaa+vjEzgU0-pjF4dWw0ABaVEnp0Ai-TUCdenZWEmiaCItsmzyHCNYKAAsDAgAbGhp2bhe7wMl2ut24gkUlhOAW0wVABE47EBBgonAYFHuwmqWiCugo7AAngYqBjWA8Ok8CpF1qxUiQ6YJPO5QKxVDYNI87PlQPiiSTuChQABqI6vD7fX7-QEfEE3O4Q0AWXaoKb8aE487wxIUYmGMLsKgRHj0nmGtHksSU01GhhFZklDo2Sr4oicOZleoIpGvFFojGWd1OrXo3UGfVmiypag25UoNqOupar5JdVnOHRzjRMMGo2+9GY6ziaL6MJfVgE+5s3Jchzojg68O51H5k0AczsKIjUxOGrhdfYDZznDz-tS-Z1GYttns9AI2tDjeNmTFnx+fwBK5+rfuU0D4kqXDCf0HEfbE67yvHnaN8YToHqLs4PbTukPx+zEc4ZbCSSzk6xNjFgwpbltwABECjyIoYFqtUQEgRWX6sD+mbXpwsH+BmWaLiOArePhADssEgNaqE4c2GIoPh3gAJzEWAWEfk2fp4d4ADMRGqCRjHkSxVHUWxqRsfRpHYUOuH8d4KA0UJIk8eJFGsd4AAsgmgMJXEMWaYlmhJ1H4WpGm4Nx2lMcOimSexhlyaZvH5pZHGycoQA",
            "prepend": "FDBmFcDsGMBcEsD2kAEBnAjuAhgJwKYAUAHgJQoDewKNKBs4uqxKAVCsQNzAC+IEMBMhTw0AfXwA3fJEKRyVWnXwMmKVAFIUAJhQBeAygAM3PmChwkqfMQAOAW0QATQgCNsafABoUN2z-sFalp6Rms7fUMjYKVYgH4UAEYY2NoALhFxKRlCP1IU1JQEzBwCXLtHF3dPHz8UAHodANJyLXsC1Iy3D3w2Xwrnbpr+2xQAWiTm1pR7U34LIVRcbEgnRHs5IKVQtXtsWAALMVAAG0REXEI9w7Fl1fXCcnZ5OfNBKxRQfFxrsVh8NCwTaUFICSzCWC4ACeYngQOwW0KO3CDkG2B8kAx5AMehQ2G4Sj42xUYRQkJhcMIiRQAGoZvsjqdzpdrkc7msNk8UHJxkkWqRXmDFp8PLBYeJbLh4PYiJiydKAYiaMj5TK0JFcdFCkoEpDwPgOrEMl8fvs-gCgfJDTqRYDxWJJQq5D4EGreYl8tr0iKTp5TEA",
            "withoutPrepend": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0agWwFMATAfQAcAnKl9iswDOFABQkAlKADeuUPNCsqQzgBsAhgE9xEgNxyF3ZhSLd6I9dwpde-QSPEAaUAHNjAvs1ES9uAL6EpJS05hSW1jyeAsJiJM4WVh4sUrIKoEYmZqAE6iLsyjaeTqCM6hQAFuwEqjQ03KKlFew1Ljo+BmmdAPzpzJx1EbZebtZMXlIAtKAJo54SHZ0KAFwM3ETM+gHE5NR0vf2JkSyizBqcQmxJzCkLSioa2gBEoABUb6CPvml3alonZxcOGNfAFcGMOEdmNEHCgAAzwgDsvhADE8EKG0LEcPhAE5kWBwYU7DFRNiAMxI-QowmQzGk+HwsnOMn41EsdFRexYhkoHHM1k0jFc+nwgAsTNALKpBLRRKhwuxDIlUtw1NltIVDNhZOVAvVQpJiu1CP5uiAA",
            "body": "function timed_prime_test(n) {\n    display(n);\n    return start_prime_test(n, get_time());\n}\nfunction start_prime_test(n, start_time) {\n    return fast_is_prime(n, math_floor(math_log(n)))\n           ? report_prime(get_time() - start_time)\n           : true;\n}\nfunction report_prime(elapsed_time) {\n    display(\" *** \");\n    display(elapsed_time);\n}\n"
          },
          { "tag": "#text", "body": " The time to test primes near 1,000,000 using " },
          { "tag": "JAVASCRIPTINLINE", "body": "fast_is_prime" },
          {
            "tag": "#text",
            "body": " is about 4 ms, 4 times the time needed to test primes near 1,000. This is faster compared to 8 ms that we achieved if we use the "
          },
          { "tag": "JAVASCRIPTINLINE", "body": "is_prime" },
          {
            "tag": "#text",
            "body": ". However, despite being 4 times slower, this fact cannot lead us to believe that it has a greater growth than "
          },
          { "tag": "LATEXINLINE", "body": "\\Theta(\\log n)" },
          {
            "tag": "#text",
            "body": ", as it should be tested with greater numbers to gain a more accurate understanding of the growth of the function. "
          }
        ]
      },
      {
        "tag": "EXERCISE",
        "title": "Exercise 1.25",
        "id": "#ex_1.25",
        "child": [
          {
            "tag": "#text",
            "body": " Alyssa P. Hacker complains that we went to a lot of extra work in writing "
          },
          {
            "tag": "#text",
            "body": ". After all, she says, since we already know how to compute exponentials, we could have simply written "
          },
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 11,
            "program": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUFQYB9TgDdOJbiUEjxEzlJmh6AUlAZQAXk+gADKo2FSSlp6AlYGCiNeAAcKbgAjABpHK1FxSWl6ek93H1SbfIB+VDz88QAuPUMTMwt+EtLQIuY2Lm5Q8MiY+KT6MAx+OoabCriFUHaIzmjYxMdQAFpUfj9NQJ16KaiAWxoAE3iwziTNpK2Um3SHTY8vb3rSopR7-Ir9I1NzTcGhsSaWDh4mx2+zih2O0VAfVOA1ALi2z2GoAODE4YyBe2RR1A10WKGhgjhKwC2mC2OiwMx4Ki0OEJUuITCk2mlLJUQJoC2RPR+wALEkAMxJACsyyAA",
            "prepend": "FDBmFcDsGMBcEsD2kAEBnAjuAhgJwKYAUAHgJQoDewKNKBs4uqxKAVCsQNzAC+IEMBMhTw0AfXwA3fJEKRyVWnXwMmKVAFIUAJhQBeAygAM3PmChwkqUNjSwJxAA6xCAIwA06hdVr1GqVAM9Yx8lMIB+FABGULDaAC4RcSkZOVJYuJRIzBwCQhs7B2c3T1QAeh1SdMylRNc2FAL7fCcXD3UUAFpo0lN+CyFUFscAW0QAEzdbfE9hzxHvJT81Yf1DIwy4yJiahKSJaVlh6t2s9Cw8ImGxyddp2acUCu15qpQtEc2wxKm0fAbrhNfjMUKtulFXuQPqYgA",
            "withoutPrepend": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AUwA8AHAWxoBMAKAIwEMAzgwA0jVmLYBKUAG9coRaABODCkWX0CQigH1mLCnyGjxLGQFJQbANy4AvvgMceAFjEBmMQFYpNoA",
            "body": "function expmod(base, exp, m) {\n    return fast_expt(base, exp) % m;\n}\n"
          },
          { "tag": "#text", "body": " Is she correct? Would this " },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          { "tag": "#text", "body": " serve as well for our fast prime tester? Explain. " }
        ],
        "solution": [
          { "tag": "#text", "body": " Alyssa's suggestion is correct at first sight: her " },
          { "tag": "JAVASCRIPTINLINE", "body": "expmod" },
          { "tag": "#text", "body": " function computes " },
          { "tag": "LATEXINLINE", "body": "\\textit{base}^{\\textit{exp}}" },
          { "tag": "#text", "body": " and then finds its remainder modulo " },
          { "tag": "LATEXINLINE", "body": "m" },
          { "tag": "#text", "body": ", as required in the Fermat test. " },
          {
            "tag": "#text",
            "body": " However, for large bases, Alyssa's method will quickly bump into limitations because JavaScript uses 64 bits to represent numbers, following the double-precision floating point standard. When the numbers become so large that they cannot be represented precisely any longer in this standard, the results become unreliable. Even worse, the method might exceed the largest number that can be represented in this standard, and the computation leads to an error. "
          },
          {
            "tag": "#text",
            "body": " For small bases, however, Alyssa's method may be even faster than the original "
          },
          { "tag": "JAVASCRIPTINLINE", "body": "expmod" },
          {
            "tag": "#text",
            "body": " function, because it will carry out only one single remainder operation. "
          }
        ]
      },
      {
        "tag": "EXERCISE",
        "title": "Exercise 1.26",
        "id": "#ex_1.26",
        "child": [
          { "tag": "#text", "body": " Louis Reasoner is having great difficulty doing exercise" },
          { "tag": "SPACE", "body": " " },
          {
            "tag": "REF",
            "id": "1.2.6-ex-link-1.24",
            "body": "1.24",
            "href": "/interactive-sicp/1.2.6#ex_1.24"
          },
          { "tag": "#text", "body": ". His " },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "fast_is_prime" }] }] },
          { "tag": "#text", "body": " test seems to run more slowly than his " },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "is_prime" }] }] },
          {
            "tag": "#text",
            "body": " test. Louis calls his friend Eva Lu Ator over to help. When they examine Louis's code, they find that he has rewritten the "
          },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          { "tag": "#text", "body": " to use an explicit multiplication, rather than calling " },
          { "tag": "#text", "body": ": " },
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 12,
            "program": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0KgZwH0BTAN1ZIAoSBKUAG9coUaABOrCkXH16AUlAZQAXjWgADAG5cAX3zFy1OqFYAPAA4BbGgBNuAIwCGjVgBpTlj1YHCxEqRl6cwtVdQ0RfyjQAH5USOixAC4GFg4ubhC+BMTYz2s7Rxd3fNAwDG8BACp8m3tnVw8QsqVK0EUrHMSUhtZQGpC6osbSgFpUNo6dfVxBwoAWDwBmDwBWPi0gA",
            "prepend": "FDBmFcDsGMBcEsD2kAE8DOB9ApgN25ABSQCUKA3sCtSgE7azi2qoCkKATCgLy8oAMAbmABfIA",
            "withoutPrepend": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AUwA8AHAWxoBMAKAIwEMAzgwA0jVmLYBKUAG9coRaABODCkWX1mLUAF59oAAwKlppQH5UJs6YBcoKoID6DAG4MS3bVOs3Fl7Q4eAWExbVAwDEkZACpxdi4+IVF4iNAo0GlQAFJM3z97EIZQOMDEorDWUABaVGiczIBuXABffDKeABYxAGYxAFYpRqA",
            "body": "function expmod(base, exp, m) {\n    return exp === 0\n           ? 1\n           : is_even(exp)\n           ? expmod(base, exp / 2, m) * expmod(base, exp / 2, m) % m\n           : base * expmod(base, exp - 1, m) % m;\n}\n"
          },
          {
            "tag": "#text",
            "body": "\"I don\" says Louis. \"I do.\" says Eva. \"By writing the \" Explain. "
          }
        ],
        "solution": [
          { "tag": "#text", "body": " Eva is correct: by evaluating the expression: " },
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 13,
            "body": "expmod(base, exp / 2, m) \n* expmod(base, exp / 2, m)\n% m"
          },
          { "tag": "#text", "body": " the expression " },
          { "tag": "JAVASCRIPTINLINE", "body": "expmod(base, exp / 2, m)" },
          {
            "tag": "#text",
            "body": " is evaluated twice at each step in the computation when the exponent is even, eliminating the benefit of the fast exponentiation algorithm—which halves the exponent when the exponent is even—therefore eliminating the feature of the algorithm that makes it faster. "
          }
        ]
      },
      {
        "tag": "EXERCISE",
        "title": "Exercise 1.27",
        "id": "#ex_1.27",
        "child": [
          { "tag": "#text", "body": " Demonstrate that the " },
          { "tag": "#text", "body": " Carmichael numbers listed in footnote" },
          { "tag": "SPACE", "body": " " },
          {
            "tag": "FOOTNOTE_REF",
            "id": "1.2.6-foot-link-4",
            "body": 4,
            "href": "/interactive-sicp/1.2.6#footnote-4"
          },
          { "tag": "#text", "body": " really do fool the Fermat test. That is, write a " },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          { "tag": "#text", "body": " that takes an integer " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " and tests whether " },
          { "tag": "LATEXINLINE", "body": "a^n" },
          { "tag": "#text", "body": " is congruent to " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": " modulo " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " for every " },
          { "tag": "LATEXINLINE", "body": "a < n" },
          { "tag": "#text", "body": ", and try your " },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          { "tag": "#text", "body": " on the given Carmichael numbers. " }
        ],
        "solution": [
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 14,
            "program": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0KgZwH0BTAN1ZIAoSBKUAG9coUaABOrCkXH16AUlAZQAXjWgADAG5cAX3zFy1OqEYBHIgENJ3AB4DhYiVJn1boAFShbO-YVKUtPRk1gC2VGQAFpasADa8DiJihoEmrLYADqE0ACbcAEaWjKwANKDpGWWhiU5OktKy5Zmq6hpJtR2iAPyo7Z21AFwMLBxc3BV8ff1iPeZWNhXZeYXFZRWgYBhVfAKKoVPToEMFRayeTVm5J6sXoAC0qNu7oKE6TvpOKcb0BKzioZYKMwKKxGBReGVLDVOvVXBcltxLGUSMiBGoVKBLG8xB9kgFvgwQeIIQxoR1YY0qC0MSQDtMehRxERWHT+kNfv9AcDQeCUaTWZ0elQiSSqQBqVCTQ6DUAESyxYrY0S40QU+jCv4kjB8Xz4EL-CLROLcACs2BQOtwIFA+vCURi8RQKA0Jst1tthod3BQAHYMABON1gD3240YAAs2FdOndYU9YYAHBgLTHg3HQ-FsNgNCmgA",
            "prepend": "FDBmFcDsGMBcEsD2kAE8DOB9ApgN25ABSQCUKA3sCtSgE7azi2qoCkKATCgLy8oAMAbmABfEBBgJkKdAEdwAQ3qEAHmUo06DJqhUoAVChXCRQA",
            "withoutPrepend": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0MgQwCcBbKsgC0YFMAbABQkAlKADeuUFNDFy1OqB4APAA6saAEwEAjRgGceAGkWrjrUROlXQzHhSLN6ylaAC870AAZJ139ID8qD5+vgBcoFR6APo8AG48JALOwsEhVoF6AI5ELDxJqupaugbGzqBgGGbCogCkoKypaVLhOvo8oABUJmqarSXdoAC0qFW19QDcqQC+qbKUtPQEPGyMFFEUPHoUQsaMFo3StvaO3YUCjMYkl6LurqCMk1YzVnPy9FQbzDsR+yFHDu83B4SAc0oEKMwiDxQSFwksVmsNltvlQUk1rIEPssUaAANSoNHo6Rwxh8AyPaTPQ52AERT7fDDCSYzXBMNgcbj8AQAVmwKCZuBADBY7C4vEEKBQnm5AqFbNFnIlAHYMABOWVgeUc8UCDAAFmwMsmcpF2q5GAAHBh+cbNaaxVzsNhPDagA",
            "body": "function carmichael(n) {\n    function expmod(base, exp, m) {\n        return exp === 0\n               ? 1\n               : is_even(exp)\n               ? square(expmod(base, exp / 2, m)) % m\n               : (base * expmod(base, exp - 1, m)) % m;\n    }\n    function fermat_test(n, a) {\n        return expmod(a, n, n) === a;\n    }\n    function iter(n, i) {\n        return i === n\n               ? true\n               : fermat_test(n, i)\n               ? iter(n, i + 1)\n               : false;\n    }\n    return iter(n, 2);\n}\n"
          }
        ]
      },
      {
        "tag": "EXERCISE",
        "title": "Exercise 1.28",
        "id": "#ex_1.28",
        "child": [
          {
            "tag": "#text",
            "body": " One variant of the Fermat test that cannot be fooled is called the "
          },
          { "child": [{ "tag": "#text", "body": "Miller-Rabin test" }] },
          { "tag": "#text", "body": " (" },
          { "child": [{ "tag": "#text", "body": "Miller 1976" }] },
          { "tag": "#text", "body": "; " },
          { "child": [{ "tag": "#text", "body": "Rabin 1980" }] },
          { "tag": "#text", "body": "). This starts from an alternate form of " },
          { "tag": "#text", "body": " Fermat's Little Theorem, which states that if " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is a prime number and " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": " is any positive integer less than " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": ", then " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": " raised to the " },
          { "tag": "LATEXINLINE", "body": "(n-1)" },
          { "tag": "#text", "body": "st power is congruent to 1 modulo" },
          { "tag": "SPACE", "body": " " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": ". To test the primality of a number " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " by the Miller-Rabin test, we pick a random number " },
          { "tag": "LATEXINLINE", "body": "a < n" },
          { "tag": "#text", "body": " and raise " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": " to the " },
          { "tag": "LATEXINLINE", "body": "(n-1)" },
          { "tag": "#text", "body": "st power modulo" },
          { "tag": "SPACE", "body": " " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " using the " },
          { "child": [{ "child": [{ "tag": "#text", "body": "function." }] }] },
          { "tag": "#text", "body": " However, whenever we perform the squaring step in " },
          {
            "tag": "#text",
            "body": ", we check to see if we have discovered a \"nontrivial square root of 1 modulo\" that is, a number not equal to 1 or "
          },
          { "tag": "LATEXINLINE", "body": "n-1" },
          { "tag": "#text", "body": " whose square is equal to 1 modulo" },
          { "tag": "SPACE", "body": " " },
          { "tag": "LATEXINLINE", "body": "n" },
          {
            "tag": "#text",
            "body": ". It is possible to prove that if such a nontrivial square root of 1 exists, then "
          },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": " is not prime. It is also possible to prove that if " },
          { "tag": "LATEXINLINE", "body": "n" },
          {
            "tag": "#text",
            "body": " is an odd number that is not prime, then, for at least half the numbers "
          },
          { "tag": "LATEXINLINE", "body": "a < n" },
          { "tag": "#text", "body": ", computing " },
          { "tag": "LATEXINLINE", "body": "a^{n-1}" },
          {
            "tag": "#text",
            "body": " in this way will reveal a nontrivial square root of 1 modulo"
          },
          { "tag": "SPACE", "body": " " },
          { "tag": "LATEXINLINE", "body": "n" },
          {
            "tag": "#text",
            "body": ". (This is why the Miller-Rabin test cannot be fooled.) Modify the "
          },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          {
            "tag": "#text",
            "body": " to signal if it discovers a nontrivial square root of 1, and use this to implement the Miller-Rabin test with a "
          },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          { "tag": "#text", "body": " analogous to " },
          {
            "child": [
              {
                "child": [
                  { "tag": "JAVASCRIPTINLINE", "body": "fermat_test" },
                  { "tag": "#text", "body": ". " }
                ]
              }
            ]
          },
          { "tag": "#text", "body": " Check your " },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          {
            "tag": "#text",
            "body": " by testing various known primes and non-primes. Hint: One convenient way to make "
          },
          { "tag": "#text", "body": " signal is to have it return 0. " }
        ],
        "solution": [
          {
            "tag": "SNIPPET",
            "latex": false,
            "id": 15,
            "program": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0KgZwH0BTAN1ZIAoSBKUAG9coUaABOrCkXH16AUlAZQAXjWgADAG5cAX3zFy1OqEYBHIgENJ3AB4DhYiVJn1boAFShbO-YVKUtPTiliQAJjQAtrwOImKS0rKgkZYUABbMBAA2NDTi3CnpzCHhUdwCXvy+-kZByVRZWazixZYARlQkzBSsjBQxQnGihoEmrLYADpE0YdxtloysADSg4xMrkbFOTgmuq5Oq6hpD26egAPyoJ2dOAFwMLBxc3Gt81zeil+ZWNhTiVOwqJYst1ev01tNZvNFkt3h94QibmtQGAMLDERjMdtNis4VisZs3vjQIpInizvc5gtWJ59lMZlSYXTQABaVAbPgCck3Uk6Jz6JwjYz0P4AoEgnp9bjiDmDG67JLiQ4qVCgAA+aokyuSrKuWMu4m523u32srGlAlJ2pQRqcl2OWPu4j5YgFYiFdT+AE9mFR+pYtmcFfQIQzLCt6GyUBGBGoVSgXaI3aJg6Bvb7+ihQABqCShCLRSOoTnVD0mCLMSINJotEIdLqS-okFbUSK9QMplxJVu9bUO+GXP5EVhG+5VxrNVr10FS-hGy4V8c1qedGdNltUNuMXUoInw+4EYGLaq4RfVyd11eN7goDQAFgA7HeAMwrW8aDR8LRAA",
            "prepend": "FDBmFcDsGMBcEsD2kAE8DOB9ApgN25ABSQCUKA3sCtSgE7azi2qoCkKATCgLy8oAMAbmABfEBBgJkKdAEdwAQ3qEAHmUo06DJqhUoAVChXCRQA",
            "withoutPrepend": "chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCY0DYBQuAzAVwDsBjAFwEsB7E0AJwEMSATGgWwAoSBKUAN65QIxgFMKRBvQ5MKACwD6BADY0aDLrIWLmbTl34AqUHwDcuAL6FSlWjKoqVYhrqYAjKiUUUxAZwoefiFRUGJyajpQMQAPAAcOGlYudyY-MQAaaPisjmDhUNEGCSl6WLjQAF5q0AAGAsLGkQB+VAamwoAuUCo-RTEANzESLnLedo7RVr8ARyImYq4KBioBqiYVH39A8sTk1PSMicmT08ny0DAMI7Pbu8K8rOP7l7zxl9AAUlAOZ47ulJpMSgEy7JKAw7ZCoAWlQuV4-D+k2+HAsoWsoXCdiiy1W602vgCXAY8MEf2KkmkjCqNRQoAAPvTqdVKj9QLCUEjGq0GFyuqBZvNFgx+CiaazOfdWvV7t0GGjRBjRFjIvRlgBPRRUQJMfIdCmlKF7LhMLL0Dlm-gs1AKkRKkQGqkarWBOkAakYLHY3HNqARFmsKvsoHYig4jmcrmYnm8hMCJCy1A4-j1RRKTqoyb84rqfNayyIYj53XDThcbhjWyJfDzIZoYYj5ejXir8cTmf87L9xbCG3SAfwodLkYrLbjXBQtQALAB2KcAZiyk9qtV4ZiAA",
            "body": "function random(n) {\n    return math_floor(math_random() * n);\n}\nfunction miller_rabin_test(n) {\n    function expmod(base, exp, m) {\n        return exp === 0\n               ? 1\n               : is_even(exp)\n               ? square(trivial_test(expmod(base,\n                                            exp / 2,\n                                            m), \n                                     m))\n                 % m\n               : (base * expmod(base, exp - 1, m)) \n                 % m;\n    }\n    function trivial_test(r, m) {\n        return r === 1 || r === m - 1\n               ? r\n               : square(r) % m === 1\n               ? 0\n               : r;\n    }\n    function try_it(a) {\n        return expmod(a, n - 1, n) === 1;\n    }\n    return try_it(1 + random(n - 1));\n}\nfunction do_miller_rabin_test(n, times) {\n    return times === 0\n           ? true\n           : miller_rabin_test(n)\n           ? do_miller_rabin_test(n, times - 1)\n           : false;\n}\n"
          }
        ]
      },
      {
        "tag": "DISPLAYFOOTNOTE",
        "id": "#footnote-1",
        "count": 1,
        "child": [
          { "tag": "#text", "body": "If " },
          { "tag": "LATEXINLINE", "body": "d" },
          { "tag": "#text", "body": " is a divisor of " },
          { "tag": "LATEXINLINE", "body": "n" },
          { "tag": "#text", "body": ", then so is " },
          { "tag": "LATEXINLINE", "body": "n/d" },
          { "tag": "#text", "body": ". But " },
          { "tag": "LATEXINLINE", "body": "d" },
          { "tag": "#text", "body": " and " },
          { "tag": "LATEXINLINE", "body": "n/d" },
          { "tag": "#text", "body": " cannot both be greater than " },
          { "tag": "LATEXINLINE", "body": "\\sqrt{n}" },
          { "tag": "#text", "body": "." }
        ]
      },
      {
        "tag": "DISPLAYFOOTNOTE",
        "id": "#footnote-2",
        "count": 2,
        "child": [
          { "tag": "#text", "body": "Pierre " },
          {
            "tag": "#text",
            "body": " de Fermat (1601–1665) is considered to be the founder of modern "
          },
          {
            "tag": "#text",
            "body": " number theory. He obtained many important number-theoretic results, but he usually announced just the results, without providing his proofs. "
          },
          {
            "tag": "#text",
            "body": " Fermat's Little Theorem was stated in a letter he wrote in 1640. The first published proof was given by "
          },
          {
            "tag": "#text",
            "body": " Euler in 1736 (and an earlier, identical proof was discovered in the unpublished manuscripts of "
          },
          {
            "tag": "#text",
            "body": " Leibniz). The most famous of Fermat's results—known as Fermat's Last Theorem—was jotted down in 1637 in his copy of the book "
          },
          { "child": [{ "tag": "#text", "body": "Arithmetic" }] },
          { "tag": "#text", "body": " (by the third-century Greek mathematician " },
          {
            "tag": "#text",
            "body": " Diophantus) with the remark \"I have discovered a truly remarkable proof, but this margin is too small to contain it.\" Finding a proof of Fermat's Last Theorem became one of the most famous challenges in number theory. A complete solution was finally given in 1995 by "
          },
          { "tag": "#text", "body": " Andrew Wiles of Princeton University." }
        ]
      },
      {
        "tag": "DISPLAYFOOTNOTE",
        "id": "#footnote-3",
        "count": 3,
        "child": [
          { "tag": "#text", "body": "The reduction steps in the cases where the exponent " },
          { "tag": "LATEXINLINE", "body": "e" },
          {
            "tag": "#text",
            "body": " is greater than 1 are based on the fact that, for any integers "
          },
          { "tag": "LATEXINLINE", "body": "x" },
          { "tag": "#text", "body": ", " },
          { "tag": "LATEXINLINE", "body": "y" },
          { "tag": "#text", "body": ", and " },
          { "tag": "LATEXINLINE", "body": "m" },
          { "tag": "#text", "body": ", we can find the remainder of " },
          { "tag": "LATEXINLINE", "body": "x" },
          { "tag": "#text", "body": " times " },
          { "tag": "LATEXINLINE", "body": "y" },
          { "tag": "#text", "body": " modulo " },
          { "tag": "LATEXINLINE", "body": "m" },
          { "tag": "#text", "body": " by computing separately the remainders of " },
          { "tag": "LATEXINLINE", "body": "x" },
          { "tag": "#text", "body": " modulo " },
          { "tag": "LATEXINLINE", "body": "m" },
          { "tag": "#text", "body": " and " },
          { "tag": "LATEXINLINE", "body": "y" },
          { "tag": "#text", "body": " modulo " },
          { "tag": "LATEXINLINE", "body": "m" },
          {
            "tag": "#text",
            "body": ", multiplying these, and then taking the remainder of the result modulo "
          },
          { "tag": "LATEXINLINE", "body": "m" },
          { "tag": "#text", "body": ". For instance, in the case where " },
          { "tag": "LATEXINLINE", "body": "e" },
          { "tag": "#text", "body": " is even, we compute the remainder of " },
          { "tag": "LATEXINLINE", "body": "b^{e/2}" },
          { "tag": "#text", "body": " modulo " },
          { "tag": "LATEXINLINE", "body": "m" },
          { "tag": "#text", "body": ", square this, and take the remainder modulo " },
          { "tag": "LATEXINLINE", "body": "m" },
          {
            "tag": "#text",
            "body": ". This technique is useful because it means we can perform our computation without ever having to deal with numbers much larger than "
          },
          { "tag": "LATEXINLINE", "body": "m" },
          { "tag": "#text", "body": ". (Compare exercise" },
          { "tag": "SPACE", "body": " " },
          {
            "tag": "REF",
            "id": "1.2.6-ex-link-1.25",
            "body": "1.25",
            "href": "/interactive-sicp/1.2.6#ex_1.25"
          },
          { "tag": "#text", "body": ".)" }
        ]
      },
      {
        "tag": "DISPLAYFOOTNOTE",
        "id": "#footnote-4",
        "count": 4,
        "child": [
          { "tag": "#text", "body": " Numbers that fool the Fermat test are called " },
          { "child": [{ "tag": "#text", "body": "Carmichael numbers" }] },
          {
            "tag": "#text",
            "body": ", and little is known about them other than that they are extremely rare. There are 255 Carmichael numbers below 100,000,000. The smallest few are 561, 1105, 1729, 2465, 2821, and 6601. In testing primality of very large numbers chosen at random, the chance of stumbling upon a value that fools the Fermat test is less than the chance that "
          },
          {
            "tag": "#text",
            "body": " cosmic radiation will cause the computer to make an error in carrying out a \"correct\" algorithm. Considering an algorithm to be inadequate for the first reason but not for the second illustrates the difference between "
          },
          { "tag": "#text", "body": " mathematics and engineering. " }
        ]
      },
      {
        "tag": "DISPLAYFOOTNOTE",
        "id": "#footnote-5",
        "count": 5,
        "child": [
          {
            "tag": "#text",
            "body": "One of the most striking applications of probabilistic prime testing has been to the field of "
          },
          { "tag": "#text", "body": " cryptography. " },
          {
            "child": [
              {
                "child": [
                  {
                    "tag": "#text",
                    "body": " \tAlthough it is computationally infeasible to factor an arbitrary 300-digit \tnumber as of this writing (2021), the primality of such a number can be checked \tin a few seconds with the Fermat test. "
                  }
                ]
              }
            ]
          },
          {
            "tag": "#text",
            "body": " This fact forms the basis of a technique for constructing \"unbreakable codes\" suggested by "
          },
          { "tag": "#text", "body": " Rivest, " },
          { "tag": "#text", "body": " Shamir, and " },
          { "tag": "#text", "body": " Adleman (1977). The resulting " },
          { "child": [{ "tag": "#text", "body": "RSA algorithm" }] },
          {
            "tag": "#text",
            "body": " has become a widely used technique for enhancing the security of electronic communications. Because of this and related developments, the study of "
          },
          {
            "tag": "#text",
            "body": " prime numbers, once considered the epitome of a topic in \"pure\" mathematics to be studied only for its own sake, now turns out to have important practical applications to cryptography, electronic funds transfer, and information retrieval."
          }
        ]
      },
      {
        "tag": "DISPLAYFOOTNOTE",
        "id": "#footnote-6",
        "count": 6,
        "child": [
          { "tag": "#text", "body": "This date is called the \t" },
          { "child": [{ "tag": "#text", "body": "UNIX epoch" }] },
          {
            "tag": "#text",
            "body": " and is part of the specification of functions \tthat deal with time in the \tUNIX"
          },
          { "tag": "LATEXINLINE", "body": "^{\\textrm{TM}}" },
          { "tag": "#text", "body": " operating \tsystem." }
        ]
      },
      {
        "tag": "DISPLAYFOOTNOTE",
        "id": "#footnote-7",
        "count": 7,
        "child": [
          { "tag": "#text", "body": "The primitive function " },
          { "tag": "JAVASCRIPTINLINE", "body": "display" },
          { "tag": "#text", "body": " returns its argument, but also prints it. Here " },
          { "tag": "JAVASCRIPTINLINE", "body": "\"" },
          { "tag": "#text", "body": "{\\tt~}" },
          { "tag": "JAVASCRIPTINLINE", "body": "***" },
          { "tag": "#text", "body": "{\\tt~}" },
          { "tag": "JAVASCRIPTINLINE", "body": "\"" },
          { "tag": "#text", "body": " is a " },
          { "child": [{ "tag": "#text", "body": "string" }] },
          { "tag": "#text", "body": ", a sequence of characters that we pass as argument to the " },
          { "tag": "JAVASCRIPTINLINE", "body": "display" },
          { "tag": "#text", "body": " function. Section" },
          { "tag": "SPACE", "body": " " },
          {
            "tag": "REF",
            "id": "1.2.6-ex-link-2.3.1",
            "body": "2.3.1",
            "href": "/interactive-sicp/2.3.1"
          },
          { "tag": "#text", "body": " introduces strings more thoroughly." }
        ]
      }
    ]
  }
]

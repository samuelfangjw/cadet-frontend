[
  {
    "tag": "SUBSECTION",
    "body": "1.3.1  \n    \n      \n      Functions\n    \n    as Arguments\n  ",
    "child": [
      {
        "tag": "TEXT",
        "child": [
          { "tag": "#text", "body": " Consider the following three " },
          { "child": [{ "child": [{ "tag": "#text", "body": "functions." }] }] },
          { "tag": "#text", "body": " The first computes the sum of the integers from " },
          { "tag": "#text", "body": " through " },
          { "tag": "#text", "body": ": " },
          {
            "tag": "SNIPPET",
            "latex": true,
            "url": "http://source-academy.github.io/playground#chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgDOhAtgPqXHkCmA5pwE70AFAEMANKABGASlABvHKEWg+ncoT51hoAHySFSg0oD8oAAz7DBgFygtAagbM2HHvyH3U46QG4cAXzxGVnYuXgFBFHEUUylvIA",
            "body": "function sum_integers(a, b) {\n    return a > b\n           ? 0\n           : a + sum_integers(a + 1, b);\n}\n"
          },
          {
            "tag": "#text",
            "body": " The second computes the sum of the cubes of the integers in the given range: "
          },
          {
            "tag": "SNIPPET",
            "latex": true,
            "url": "http://source-academy.github.io/playground#chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGimEBGApgBQAeAlKAN46gDQAJ2blCQuu1AAqUFNnsA3DgC+eImSq1QAZ0IBbAPoMWO1gEMANKEbc+g4aPF1zoAHw3+D76AD8oAAYvH0EALnomNnNuAGpdA2NIs1c4lGtbZTUcPSMTZjMMawB2TkUgA",
            "body": "function sum_cubes(a, b) {\n    return a > b\n           ? 0\n           : cube(a) + sum_cubes(a + 1, b);\n}\n"
          },
          {
            "tag": "#text",
            "body": " The third computes the sum of a sequence of terms in the series "
          },
          {
            "tag": "LATEX",
            "body": " \\frac{1}{1\\cdot3}+\\frac{1}{5\\cdot7}+\\frac{1}{9\\cdot11}+\\cdots "
          },
          { "tag": "#text", "body": " which converges to " },
          { "tag": "LATEXINLINE", "body": "\\pi/8" },
          { "tag": "#text", "body": " (very slowly):" },
          {
            "tag": "SNIPPET",
            "latex": true,
            "url": "http://source-academy.github.io/playground#chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgAOlA+gM6EC2AFAIYA0oAIwCUoAN45Qk0ACcApuULS63UAD5BEqVqkB+UAAZN2rQC5UoMD1AAqUFYDUoAExCRjxqw4PQAFn7CAbhwAXzwADhsGZjYuFH4UfUShAKA",
            "body": "function pi_sum(a, b) {\n    return a > b\n           ? 0\n           : 1 / (a * (a + 2)) + pi_sum(a + 4, b);\n}\n"
          }
        ]
      },
      {
        "tag": "TEXT",
        "child": [
          { "tag": "#text", "body": " These three " },
          { "child": [{ "child": [{ "tag": "#text", "body": "functions" }] }] },
          {
            "tag": "#text",
            "body": " clearly share a common underlying pattern. They are for the most part identical, differing only in the name of the "
          },
          { "child": [{ "child": [{ "tag": "#text", "body": "function," }] }] },
          { "tag": "#text", "body": " the function of " },
          {
            "tag": "#text",
            "body": " used to compute the term to be added, and the function that provides the next value of "
          },
          { "tag": "#text", "body": ". We could generate each of the " },
          { "child": [{ "child": [{ "tag": "#text", "body": "functions" }] }] },
          { "tag": "#text", "body": " by filling in slots in the same template: " },
          {
            "tag": "SNIPPET",
            "latex": true,
            "child": [
              {
                "tag": "#text",
                "body": " function $name$(a, b) { return a > b ? 0 : $term$(a) + $name$($next$(a), b); } "
              }
            ]
          }
        ]
      },
      {
        "tag": "TEXT",
        "child": [
          {
            "tag": "#text",
            "body": " The presence of such a common pattern is strong evidence that there is a useful "
          },
          {
            "tag": "#text",
            "body": " abstraction waiting to be brought to the surface. Indeed, mathematicians long ago identified the abstraction of "
          },
          { "child": [{ "tag": "#text", "body": "summation of a series" }] },
          { "tag": "#text", "body": " and invented " },
          { "child": [{ "tag": "#text", "body": "sigma notation," }] },
          { "tag": "#text", "body": " for example " },
          {
            "tag": "LATEX",
            "body": "\\begin{array}{lll}       \\sum_{n=a}^{b}\\ f(n)&=&f(a)+\\cdots+f(b)       \\end{array}"
          },
          {
            "tag": "#text",
            "body": " to express this concept. The power of sigma notation is that it allows mathematicians to deal with the concept of summation itself rather than only with particular sums"
          },
          { "nodeName": "—", "tag": "EMDASH" },
          {
            "tag": "#text",
            "body": "for example, to formulate general results about sums that are independent of the particular series being summed. "
          }
        ]
      },
      {
        "tag": "TEXT",
        "child": [
          {
            "tag": "#text",
            "body": " Similarly, as program designers, we would like our language to be powerful enough so that we can write a "
          },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          {
            "tag": "#text",
            "body": " that expresses the concept of summation itself rather than only "
          },
          { "child": [{ "child": [{ "tag": "#text", "body": "functions" }] }] },
          { "tag": "#text", "body": " that compute particular sums. We can do so readily in our " },
          { "child": [{ "child": [{ "tag": "#text", "body": "functional" }] }] },
          {
            "tag": "#text",
            "body": " language by taking the common template shown above and transforming the "
          },
          { "child": [{ "tag": "#text", "body": "slots" }] },
          { "tag": "#text", "body": " into " },
          { "child": [{ "child": [{ "tag": "#text", "body": "parameters: " }] }] },
          {
            "tag": "SNIPPET",
            "latex": true,
            "body": "function sum(term, a, next, b) {\n    return a > b\n           ? 0\n           : term(a) + sum(term, next(a), next, b);\n}"
          }
        ]
      },
      {
        "tag": "TEXT",
        "child": [
          { "tag": "#text", "body": " Notice that " },
          { "tag": "#text", "body": " takes as its arguments the lower and upper bounds " },
          { "tag": "#text", "body": " and " },
          { "tag": "#text", "body": " together with the " },
          { "child": [{ "child": [{ "tag": "#text", "body": "functions" }] }] },
          { "tag": "#text", "body": " and " },
          { "tag": "#text", "body": ". We can use " },
          { "tag": "#text", "body": " just as we would any " },
          { "child": [{ "child": [{ "tag": "#text", "body": "function." }] }] },
          { "tag": "#text", "body": " For example, we can use it (along with a " },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          { "tag": "#text", "body": " that increments its argument by 1) to define " },
          {
            "child": [
              {
                "child": [
                  { "tag": "JAVASCRIPTINLINE", "body": "sum_cubes" },
                  { "tag": "#text", "body": ":" }
                ]
              }
            ]
          },
          {
            "tag": "SNIPPET",
            "latex": true,
            "url": "http://source-academy.github.io/playground#chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGimEBGApgBQAeAlKAN46gDQAJ2blCQuu1AAqUFNnsA3DgC+eImSq1QAZ0IBbVuWZD9AGlABDC8WbtyFxtz6Dho8XUugAfKEb9XQNAAflAABgCgwQAuUGNTVktuAGpdAyMTc1Bbe0TOGzsHP05lNQISCho6SjJWYmdItzEJbNBUlFLyzSq0-QB9BhYdRMcG1xFmuj1DQeYLa1Aa0lHOnGmBpmZhlAsUMJKgA",
            "body": "function inc(n) {\n    return n + 1;\n}\nfunction sum_cubes(a, b) {\n    return sum(cube, a, inc, b);\n}\n"
          }
        ]
      },
      {
        "tag": "TEXT",
        "child": [
          {
            "tag": "#text",
            "body": " Using this, we can compute the sum of the cubes of the integers from 1 to 10: "
          },
          {
            "tag": "SNIPPET",
            "latex": true,
            "url": "http://source-academy.github.io/playground#chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGimEBGApgBQAeAlKAN46gDQAJ2blCQuu1AAqUFNnsA3DgC+eImSq1QAZ0IBbVuWZD9AGlABDC8WbtyFxtz6Dho8XUugAfKEb9XQNAAflAABgCgwQAuUGNTVktuAGpdAyMTc1Bbe0TOGzsHP05lNQISCho6SjJWYmdItzEJbNBUlFLyzSq0-QB9BhYdRMcG1xFmuj1DQeYLa1Aa0lHOnGmBpmZhlAsUMJKgA",
            "body": "sum_cubes(1, 10);\n",
            "output": "\n3025"
          }
        ]
      },
      {
        "tag": "TEXT",
        "child": [
          { "tag": "#text", "body": " With the aid of an identity " },
          { "child": [{ "child": [{ "tag": "#text", "body": "function" }] }] },
          { "tag": "#text", "body": " to compute the term, we can define " },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "sum_integers" }] }] },
          { "tag": "#text", "body": " in terms of " },
          { "tag": "#text", "body": ": " },
          {
            "tag": "SNIPPET",
            "latex": true,
            "url": "http://source-academy.github.io/playground#chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGiUAmApsVeQJ4AUAHgJSgBvHKBGgATk3KExdbgG4cAXzyMWbLgBYATLzlA",
            "body": "function identity(x) {\n    return x;\n}\n"
          },
          {
            "tag": "SNIPPET",
            "latex": true,
            "url": "http://source-academy.github.io/playground#chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgDOhAtgBTkCmATkwDSgCGfYuwAe5PgCMAlKADeOUItCd25Qpzr9QAPlASFSw0oD8oAAwGjhgFygO3FvxkBqBszZdeoYWMdShouJ6UgDcOAC+eERkVLSglGQsxDLyhipqGt6grihhkQQkFDR0lAAm7MRU5ACeLCIplsqq6nQieVGFsXSMTAD6CRwA5lz0jpINac2ZPSxlFVXVfILxZOPtOD39lezDnKMofChmoUA",
            "body": "function sum_integers(a, b) {\n    return sum(identity, a, inc, b);\n}\n"
          },
          { "tag": "#text", "body": " Then we can add up the integers from 1 to 10: " },
          {
            "tag": "SNIPPET",
            "latex": true,
            "url": "http://source-academy.github.io/playground#chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgDOhAtgBTkCmATkwDSgCGfYuwAe5PgCMAlKADeOUItCd25Qpzr9QAPlASFSw0oD8oAAwGjhgFygO3FvxkBqBszZdeoYWMdShouJ6UgDcOAC+eERkVLSglGQsxDLyhipqGt6grihhkQQkFDR0lAAm7MRU5ACeLCIplsqq6nQieVGFsXSMTAD6CRwA5lz0jpINac2ZPSxlFVXVfILxZOPtOD39lezDnKMofChmoUA",
            "body": "sum_integers(1, 10);\n",
            "output": "\n55"
          }
        ]
      },
      {
        "tag": "TEXT",
        "child": [
          { "tag": "#text", "body": " We can also " },
          {
            "child": [
              {
                "child": [
                  { "tag": "#text", "body": "define " },
                  { "tag": "JAVASCRIPTINLINE", "body": "pi_sum" }
                ]
              }
            ]
          },
          { "tag": "#text", "body": " in the same way:" },
          {
            "tag": "SNIPPET",
            "latex": true,
            "url": "http://source-academy.github.io/playground#chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgDOhAtgBTkCmATkwDSgCGfYuwAe5PgCMAlKADeOUItCd25Qpzr9QAPlASFSw0oD8oAAwGjhgFygO3FvxkBqBszZdeoYWMdShouJ6UgDcOAC+eERkVLSgAA6UAPqMrILBcpag0RQ0dIlJ9qwiMvJWiipqGqigYCwioABUoPWgrgBMUqFZkYY5sfnJPuT1pVmGlep0Da4ALGGGvUqT1aksBUV86QXDkt2ROAAcTQnJayh8KGbXoUA",
            "body": "function pi_sum(a, b) {\n    function pi_term(x) {\n        return 1 / (x * (x + 2));\n    }\n    function pi_next(x) {\n        return x + 4;\n    }\n    return sum(pi_term, a, pi_next, b);\n}\n"
          }
        ]
      },
      {
        "tag": "TEXT",
        "child": [
          { "tag": "#text", "body": " Using these " },
          { "child": [{ "child": [{ "tag": "#text", "body": "functions," }] }] },
          { "tag": "#text", "body": " we can compute an approximation to " },
          { "tag": "LATEXINLINE", "body": "\\pi" },
          { "tag": "#text", "body": ": " },
          {
            "tag": "SNIPPET",
            "latex": true,
            "url": "http://source-academy.github.io/playground#chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgDOhAtgBTkCmATkwDSgCGfYuwAe5PgCMAlKADeOUItCd25Qpzr9QAPlASFSw0oD8oAAwGjhgFygO3FvxkBqBszZdeoYWMdShouJ6UgDcOAC+eERkVLSgAA6UAPqMrILBcpag0RQ0dIlJ9qwiMvJWiipqGqigYCwioABUoPWgrgBMUqFZkYY5sfnJPuT1pVmGlep0Da4ALGGGvUqT1aksBUV86QXDkt2ROAAcTQnJayh8KGbXoUA",
            "body": "8 * pi_sum(1, 1000);\n",
            "output": "\n3.139592655589783"
          }
        ]
      },
      {
        "tag": "TEXT",
        "child": [
          { "tag": "#text", "body": " Once we have " },
          {
            "tag": "#text",
            "body": ", we can use it as a building block in formulating further concepts. For instance, the "
          },
          { "tag": "#text", "body": " definite integral of a function " },
          { "tag": "LATEXINLINE", "body": "f" },
          { "tag": "#text", "body": " between the limits " },
          { "tag": "LATEXINLINE", "body": "a" },
          { "tag": "#text", "body": " and " },
          { "tag": "LATEXINLINE", "body": "b" },
          { "tag": "#text", "body": " can be approximated numerically using the formula " },
          {
            "tag": "LATEX",
            "body": "       \\int_{a}^{b}f =       \\left[ f\\left( a+\\frac{dx}{2} \\right) + f \\left(a+dx+\\frac{dx}{2}       \\right) + f \\left( a+2dx+\\frac{dx}{2} \\right)+\\cdots       \\right] dx       "
          },
          { "tag": "#text", "body": " for small values of " },
          { "tag": "LATEXINLINE", "body": "dx" },
          { "tag": "#text", "body": ". We can express this directly as a " },
          { "child": [{ "child": [{ "tag": "#text", "body": "function:" }] }] },
          {
            "tag": "SNIPPET",
            "latex": true,
            "url": "http://source-academy.github.io/playground#chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgDOhAtgBTkCmATkwDSgCGfYuwAe5PgCMAlKADeOUItCd25Qpzr9QAPlASFSw0oD8oAAwGjhgFygO3FvxkBqBszZdeoYWMdShouJ6UgDcOAC+eERkVLSgpIQS7CwiMvKGKmoaoCKgAFQ5+TlhkQQkFDR0lMQcAOac-AA2LPh8gnp8ACapcpag0RVx-J2dAPrdKWl9GarqdLmu3WGGkTNZdIysrQKgi7lgAExtI+MikjIFSxF41XUNzQlJfGZ8KM9oZiihQA",
            "body": "function integral(f, a, b, dx) {\n    function add_dx(x) {\n        return x + dx;\n    }\n    return sum(f, a + dx / 2, add_dx, b) * dx;\n}\n"
          },
          {
            "tag": "SNIPPET",
            "latex": true,
            "url": "http://source-academy.github.io/playground#chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGimEBGApgBQAeAlKAN46gDQAJ2blCQuu1AAqUFNnsA3DgC+eImSq1QAZ0IBbVuWZD9AGlABDC8WbtyFxtz6Dho8XUugAfKEb9XQNAAflAABgCgwQAuUGNTVktuAGpdAyMTc1Bbe0TOGzsHP05lNQISCho6SmJjAHMhSwAbVnwLaz8LABMuXkjQDUrtSy6ugH0ejmd+1xExCTlQVJ7lVzVZ9wW9QzarJdAe0DAAJnbRifZHblkV1Twa+saWhhYLMIsUN7QwlBKgA",
            "body": "integral(cube, 0, 1, 0.01);\n",
            "output": "\n0.24998750000000042"
          },
          {
            "tag": "SNIPPET",
            "latex": true,
            "url": "http://source-academy.github.io/playground#chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGimEBGApgBQAeAlKAN46gDQAJ2blCQuu1AAqUFNnsA3DgC+eImSq1QAZ0IBbVuWZD9AGlABDC8WbtyFxtz6Dho8XUugAfKEb9XQNAAflAABgCgwQAuUGNTVktuAGpdAyMTc1Bbe0TOGzsHP05lNQISCho6SmJjAHMhSwAbVnwLaz8LABMuXkjQDUrtSy6ugH0ejmd+1xExCTlQVJ7lVzVZ9wW9QzarJdAe0DAAJnbRifZHblkV1TwQA8sROOo4oQBPcLQwsJRQAHdKOQABagGp+ITUf46EzBHA1eqNFoMFgWMIWFBo75hY4lIA",
            "body": "integral(cube, 0, 1, 0.001);\n",
            "output": "\n0.249999875000001"
          },
          { "tag": "#text", "body": " (The exact value of the integral of " },
          { "tag": "#text", "body": " between 0 and 1 is 1/4.) " }
        ]
      },
      {
        "tag": "EXERCISE",
        "body": "\n    <div class=\"permalink\">\n    <a name=\"ex_1.29\" class=\"permalink\"></a><EXERCISE><b><a class=\"exercise-number permalink\" id=\"ex_1.29\">Exercise 1.29 </a></b> \n  \n      <div class=\"Solution\">\n      <div class=\"solution_btn\"><button class=\"btn btn-secondary solution_btn\" href=\"#solution_25_1_div\" data-toggle=\"collapse\">Solution</button></div>\n      <div class=\"solution_content collapse\" id=\"solution_25_1_div\"><SOLUTION>\n    </SOLUTION></div></div>\n</EXERCISE></div>\n"
      },
      {
        "tag": "EXERCISE",
        "body": "\n    <div class=\"permalink\">\n    <a name=\"ex_1.30\" class=\"permalink\"></a><EXERCISE><b><a class=\"exercise-number permalink\" id=\"ex_1.30\">Exercise 1.30 </a></b> \n  \n      <div class=\"Solution\">\n      <div class=\"solution_btn\"><button class=\"btn btn-secondary solution_btn\" href=\"#solution_25_2_div\" data-toggle=\"collapse\">Solution</button></div>\n      <div class=\"solution_content collapse\" id=\"solution_25_2_div\"><SOLUTION>\n    </SOLUTION></div></div>\n</EXERCISE></div>\n"
      },
      {
        "tag": "EXERCISE",
        "body": "\n    <div class=\"permalink\">\n    <a name=\"ex_1.31\" class=\"permalink\"></a><EXERCISE><b><a class=\"exercise-number permalink\" id=\"ex_1.31\">Exercise 1.31 </a></b> \n  \n      <div class=\"Solution\">\n      <div class=\"solution_btn\"><button class=\"btn btn-secondary solution_btn\" href=\"#solution_25_3_div\" data-toggle=\"collapse\">Solution</button></div>\n      <div class=\"solution_content collapse\" id=\"solution_25_3_div\"><SOLUTION>\n    </SOLUTION></div></div>\n</EXERCISE></div>\n"
      },
      {
        "tag": "EXERCISE",
        "body": "\n    <div class=\"permalink\">\n    <a name=\"ex_1.32\" class=\"permalink\"></a><EXERCISE><b><a class=\"exercise-number permalink\" id=\"ex_1.32\">Exercise 1.32 </a></b> \n  \n      <div class=\"Solution\">\n      <div class=\"solution_btn\"><button class=\"btn btn-secondary solution_btn\" href=\"#solution_25_4_div\" data-toggle=\"collapse\">Solution</button></div>\n      <div class=\"solution_content collapse\" id=\"solution_25_4_div\"><SOLUTION>\n    </SOLUTION></div></div>\n</EXERCISE></div>\n"
      },
      {
        "tag": "EXERCISE",
        "body": "\n    <div class=\"permalink\">\n    <a name=\"ex_1.33\" class=\"permalink\"></a><EXERCISE><b><a class=\"exercise-number permalink\" id=\"ex_1.33\">Exercise 1.33 </a></b> \n  \n      <div class=\"Solution\">\n      <div class=\"solution_btn\"><button class=\"btn btn-secondary solution_btn\" href=\"#solution_25_5_div\" data-toggle=\"collapse\">Solution</button></div>\n      <div class=\"solution_content collapse\" id=\"solution_25_5_div\"><SOLUTION>\n    </SOLUTION></div></div>\n</EXERCISE></div>\n"
      },
      {
        "tag": "DISPLAYFOOTNOTE",
        "child": [
          { "tag": "#text", "body": "This series, " },
          { "tag": "#text", "body": " usually written in the equivalent form " },
          {
            "tag": "LATEXINLINE",
            "body": "\\frac {\\pi}{4} = 1-\\frac{1}     {3}+\\frac{1}{5}-\\frac{1}{7}+\\cdots"
          },
          { "tag": "#text", "body": ", is due to Leibniz. We" },
          { "tag": "APOS", "body": "'" },
          {
            "tag": "#text",
            "body": "ll see how to use this as the basis for some fancy numerical tricks in section"
          },
          { "tag": "SPACE", "body": " " },
          {
            "tag": "REF",
            "body": "<REF NAME=\"sec:exploiting-streams\"><a class=\"superscript\" id=\"1.3.1-sec-link-3.5.3\" href=\"./3.5.3.html\">3.5.3</a></REF>"
          },
          { "tag": "#text", "body": "." }
        ]
      },
      {
        "child": [
          { "tag": "#text", "body": "Notice that we have used block structure (section" },
          { "tag": "SPACE", "body": " " },
          {
            "tag": "REF",
            "body": "<REF NAME=\"sec:black-box\"><a class=\"superscript\" id=\"1.3.1-sec-link-1.1.8\" href=\"./1.1.8.html\">1.1.8</a></REF>"
          },
          { "tag": "#text", "body": ") to embed the " },
          {
            "child": [
              {
                "child": [
                  { "tag": "#text", "body": "declarations of " },
                  { "tag": "JAVASCRIPTINLINE", "body": "pi_next" }
                ]
              }
            ]
          },
          { "tag": "#text", "body": " and " },
          { "child": [{ "child": [{ "tag": "JAVASCRIPTINLINE", "body": "pi_term" }] }] },
          { "tag": "#text", "body": " within " },
          {
            "child": [
              {
                "child": [
                  { "tag": "JAVASCRIPTINLINE", "body": "pi_sum" },
                  { "tag": "#text", "body": "," }
                ]
              }
            ]
          },
          { "tag": "#text", "body": " since these " },
          { "child": [{ "child": [{ "tag": "#text", "body": "functions" }] }] },
          {
            "tag": "#text",
            "body": " are unlikely to be useful for any other purpose. We will see how to get rid of them altogether in section"
          },
          { "tag": "SPACE", "body": " " },
          {
            "tag": "REF",
            "body": "<REF NAME=\"sec:lambda\"><a class=\"superscript\" id=\"1.3.1-sec-link-1.3.2\" href=\"./1.3.2.html\">1.3.2</a></REF>"
          },
          { "tag": "#text", "body": "." }
        ]
      },
      {
        "child": [
          { "tag": "#text", "body": "The intent of exercises" },
          { "tag": "SPACE", "body": " " },
          {
            "tag": "REF",
            "body": "<REF NAME=\"ex:product\"><a class=\"superscript\" id=\"1.3.1-ex-link-1.31\" href=\"./1.3.1.html#ex_1.31\">1.31</a></REF>"
          },
          { "nodeName": "–", "tag": "ENDASH" },
          {
            "tag": "REF",
            "body": "<REF NAME=\"ex:filtered-accumulate\"><a class=\"superscript\" id=\"1.3.1-ex-link-1.33\" href=\"./1.3.1.html#ex_1.33\">1.33</a></REF>"
          },
          {
            "tag": "#text",
            "body": " is to demonstrate the expressive \tpower that is attained by using an appropriate abstraction to \tconsolidate many seemingly disparate operations. However, though \taccumulation and filtering are elegant ideas, our hands are somewhat \ttied in using them at this point since we do not yet have data \tstructures to provide suitable means of combination for these \tabstractions. We will return to these ideas in \tsection"
          },
          { "tag": "SPACE", "body": " " },
          {
            "tag": "REF",
            "body": "<REF NAME=\"sec:sequences-conventional-interfaces\"><a class=\"superscript\" id=\"1.3.1-sec-link-2.2.3\" href=\"./2.2.3.html\">2.2.3</a></REF>"
          },
          { "tag": "#text", "body": " when \twe show how to use " },
          { "child": [{ "tag": "#text", "body": "sequences" }] },
          {
            "tag": "#text",
            "body": " as interfaces for combining \tfilters and accumulators to build even more powerful abstractions. We \twill see there how these methods really come into their own as a \tpowerful and elegant approach to designing programs."
          }
        ]
      },
      {
        "child": [
          {
            "tag": "#text",
            "body": "This formula \twas discovered by the seventeenth-century \tEnglish mathematician \t"
          },
          { "tag": "#text", "body": " \tJohn Wallis." }
        ]
      }
    ]
  }
]
